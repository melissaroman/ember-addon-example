const assert = require('assert');
const configForDeployTarget = require('../lib/config-for-deploy-target');

const {
  TFLY_STAGING,
  TFLY_PRODUCTION,
  TFLY_DEV
} = configForDeployTarget;

describe('opt for deploy target tests', function() {
  it('no object passed returns falsey value', function() {
    env('stage02');

    const result = configForDeployTarget(null);

    assert.ok(!result);
  });

  it('unavailable properties return falsey value', function() {
    env('stage02');

    const result = configForDeployTarget({
      stg01: '2345'
    });

    assert.ok(!result);
  });

  it('unavailable properties defer to default if available', function() {
    env('stage02');

    const result = configForDeployTarget({
      stg01: '2345',
      default: '4321'
    });

    assert.equal(result, '4321');
  });

  it('available standard properties return matched value', function() {
    env('stage02');

    const result = configForDeployTarget({
      stage02: '2345'
    });

    assert.equal(result, '2345');
  });

  it('available glob-matching properties return matched value', function() {
    env('stage02');

    const result = configForDeployTarget({
      [TFLY_STAGING]: '2345'
    });

    assert.equal(result, '2345');
  });

  it('specific properties override glob matched value', function() {
    env('stage02');

    const result = configForDeployTarget({
      [TFLY_STAGING]: '2345',
      stage02: '5678'
    });

    assert.equal(result, '5678');
  });

  it('prod glob-matching properties return matched value', function() {
    env('prod02');

    const result = configForDeployTarget({
      [TFLY_PRODUCTION]: '2345'
    });

    assert.equal(result, '2345');
  });

  it('dev glob-matching properties return matched value', function() {
    env('dev14');

    const result = configForDeployTarget({
      [TFLY_DEV]: '2345'
    });

    assert.equal(result, '2345');
  });

  it('will run function if matched value is a function', function() {
    env('dev14');

    const result = configForDeployTarget({
      [TFLY_DEV](env) {
        return `${env}-2345`
      }
    });

    assert.equal(result, 'dev14-2345');
  });
});

function env(tflyEnv) {
  process.env.TFLY_DEPLOY_TARGET = tflyEnv;
}
