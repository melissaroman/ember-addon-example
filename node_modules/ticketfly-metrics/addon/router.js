import EmberRouter from 'ember-router';
import Ember from 'ember';
import service from 'ember-service/inject';
import get from 'ember-metal/get';
import { assign } from 'ember-platform';
import { tryInvoke } from 'ember-utils';
import RSVP from 'rsvp';

const { resolve, all } = RSVP;
const { testing } = Ember;

function metricsModelFromRoute({ _handler: route }) {
  const { currentModel } = route;
  const metricsModel = tryInvoke(route, 'metricsForModel', [currentModel]) || {};

  return resolve(metricsModel);
}

function mergeMetricsModels(promises) {
  return all(promises).then((metricsModels) => {
    return metricsModels.reduce((data, metricsModel) => {
      return assign(data, metricsModel);
    }, {});
  });
}

export default EmberRouter.extend({
  metrics: service(),

  didTransition(infos) {
    this._super(...arguments);
    this._trackPage(infos);
  },

  _trackPage(infos) {
    const metrics = get(this, 'metrics');
    const page = get(this, 'url');
    const title = get(this, 'currentRouteName');

    let isPending = true;

    // If we're testing, we need to let the runloop that we're
    // doing something that'll resolve later that we need to test.
    if (testing) {
      const { Test: { registerWaiter } } = Ember;

      registerWaiter(() => isPending === false);
    }

    const promises = infos.map(metricsModelFromRoute);

    mergeMetricsModels(promises).then((pageData) => {
      metrics.trackPage(assign({ page, title }, pageData));
    }).finally(() => {
      if (testing) {
        isPending = false;
      }
    });
  }
});
