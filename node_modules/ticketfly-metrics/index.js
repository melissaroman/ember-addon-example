/* jshint node: true */
'use strict';

const configSegment = require('./lib/segment-config');
const configNewRelic = require('./lib/new-relic-config');
const writeFile = require('broccoli-file-creator');
const mergeTrees = require('broccoli-merge-trees');
const generateNewRelic = require('./lib/generate-new-relic');

const {
  TFLY_STAGING,
  TFLY_PRODUCTION,
  TFLY_DEV
} = require('ticketfly-ember-env').configForDeployTarget;

module.exports = {
  name: 'ticketfly-metrics',
  configSegment,
  configNewRelic,

  targets: {
    TFLY_STAGING,
    TFLY_PRODUCTION,
    TFLY_DEV
  },

  included() {
    this._super.included.apply(this, arguments);

    // Don't include the new relic script if running in a fastboot environment.
    if (process.env.EMBER_CLI_FASTBOOT) return;

    const env = process.env.EMBER_ENV;
    const options = this.newRelicOptions = this.getNewRelicOptions(env);

    if (options.enabled) {
      this.app.import('vendor/new-relic.js');
    }
  },

  getNewRelicOptions(env) {
    return (this.project.config(env).newRelic) || {};
  },

  treeForVendor(tree) {
    const options = this.newRelicOptions;

    if (options.enabled) {
      const file = writeFile('new-relic.js', generateNewRelic(options));

      if (file) {
        if (tree) {
          return mergeTrees([file, tree]);
        } else {
          return file;
        }
      }
      return tree;
    }
  }
};
