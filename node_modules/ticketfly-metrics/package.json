{
  "_args": [
    [
      {
        "raw": "ticketfly-metrics@github:ticketfly/ticketfly-metrics",
        "scope": null,
        "escapedName": "ticketfly-metrics",
        "name": "ticketfly-metrics",
        "rawSpec": "github:ticketfly/ticketfly-metrics",
        "spec": "github:ticketfly/ticketfly-metrics",
        "type": "hosted",
        "hosted": {
          "type": "github",
          "ssh": "git@github.com:ticketfly/ticketfly-metrics.git",
          "sshUrl": "git+ssh://git@github.com/ticketfly/ticketfly-metrics.git",
          "httpsUrl": "git+https://github.com/ticketfly/ticketfly-metrics.git",
          "gitUrl": "git://github.com/ticketfly/ticketfly-metrics.git",
          "shortcut": "github:ticketfly/ticketfly-metrics",
          "directUrl": "https://raw.githubusercontent.com/ticketfly/ticketfly-metrics/master/package.json"
        }
      },
      "/Users/melissa.roman/Desktop/commerce/ticket-transfer-addon"
    ]
  ],
  "_from": "ticketfly/ticketfly-metrics",
  "_id": "ticketfly-metrics@0.1.0",
  "_inCache": true,
  "_location": "/ticketfly-metrics",
  "_phantomChildren": {
    "amdefine": "1.0.1",
    "babel-plugin-constant-folding": "1.0.1",
    "babel-plugin-dead-code-elimination": "1.0.2",
    "babel-plugin-eval": "1.0.1",
    "babel-plugin-inline-environment-variables": "1.0.1",
    "babel-plugin-jscript": "1.0.4",
    "babel-plugin-member-expression-literals": "1.0.1",
    "babel-plugin-property-literals": "1.0.1",
    "babel-plugin-proto-to-assign": "1.0.4",
    "babel-plugin-react-constant-elements": "1.0.3",
    "babel-plugin-react-display-name": "1.0.3",
    "babel-plugin-remove-console": "1.0.1",
    "babel-plugin-remove-debugger": "1.0.1",
    "babel-plugin-runtime": "1.0.7",
    "babel-plugin-undeclared-variables-check": "1.0.2",
    "babel-plugin-undefined-to-void": "1.1.6",
    "bluebird": "2.11.0",
    "brace-expansion": "1.1.8",
    "broccoli-funnel": "1.2.0",
    "broccoli-merge-trees": "1.2.4",
    "broccoli-persistent-filter": "1.4.2",
    "chalk": "1.1.3",
    "clone": "2.1.1",
    "convert-source-map": "1.5.0",
    "debug": "2.6.8",
    "diff": "3.3.0",
    "esutils": "2.0.2",
    "fs-readdir-recursive": "0.1.2",
    "get-stdin": "4.0.1",
    "hash-for-dep": "1.1.2",
    "heimdalljs-logger": "0.1.9",
    "is-finite": "1.0.2",
    "is-integer": "1.0.7",
    "json-stable-stringify": "1.0.1",
    "native-promise-only": "0.8.1",
    "os-tmpdir": "1.0.2",
    "output-file-sync": "1.1.2",
    "path-exists": "1.0.0",
    "path-is-absolute": "1.0.1",
    "private": "0.1.7",
    "regenerator": "0.8.40",
    "regexpu": "1.3.0",
    "resolve": "1.3.3",
    "rsvp": "3.6.2",
    "semver": "5.3.0",
    "shebang-regex": "1.0.0",
    "slash": "1.0.0",
    "source-map": "0.5.6",
    "text-encoding": "0.6.4",
    "to-fast-properties": "1.0.3",
    "trim-right": "1.0.1",
    "try-resolve": "1.0.1",
    "type-detect": "4.0.3",
    "user-home": "1.1.1",
    "workerpool": "2.2.2"
  },
  "_requested": {
    "raw": "ticketfly-metrics@github:ticketfly/ticketfly-metrics",
    "scope": null,
    "escapedName": "ticketfly-metrics",
    "name": "ticketfly-metrics",
    "rawSpec": "github:ticketfly/ticketfly-metrics",
    "spec": "github:ticketfly/ticketfly-metrics",
    "type": "hosted",
    "hosted": {
      "type": "github",
      "ssh": "git@github.com:ticketfly/ticketfly-metrics.git",
      "sshUrl": "git+ssh://git@github.com/ticketfly/ticketfly-metrics.git",
      "httpsUrl": "git+https://github.com/ticketfly/ticketfly-metrics.git",
      "gitUrl": "git://github.com/ticketfly/ticketfly-metrics.git",
      "shortcut": "github:ticketfly/ticketfly-metrics",
      "directUrl": "https://raw.githubusercontent.com/ticketfly/ticketfly-metrics/master/package.json"
    }
  },
  "_requiredBy": [
    "#DEV:/"
  ],
  "_resolved": "git+https://github.com/ticketfly/ticketfly-metrics.git#98a6980511a7affb24b4756af141920b64c60799",
  "_shasum": "25a8f750d3cdeb574ccbc4ac0fe831c19a1ffd7b",
  "_shrinkwrap": null,
  "_spec": "ticketfly-metrics@github:ticketfly/ticketfly-metrics",
  "_where": "/Users/melissa.roman/Desktop/commerce/ticket-transfer-addon",
  "author": "",
  "dependencies": {
    "broccoli-file-creator": "^1.1.1",
    "broccoli-merge-trees": "^1.2.1",
    "ember-cli-babel": "^5.1.7",
    "ember-metrics": "git+https://github.com/spencer516/ember-metrics.git#011981b62eed7c0097d6ad2da6a51d4b1e0cce9c",
    "ember-sinon": "0.7.0",
    "ticketfly-ember-env": "github:ticketfly/ticketfly-ember-env"
  },
  "description": "The default blueprint for ember-cli addons.",
  "devDependencies": {
    "broccoli-asset-rev": "^2.4.5",
    "ember-ajax": "^2.4.1",
    "ember-cli": "2.10.0",
    "ember-cli-app-version": "^2.0.0",
    "ember-cli-dependency-checker": "^1.3.0",
    "ember-cli-eslint": "3.0.2",
    "ember-cli-htmlbars": "^1.0.10",
    "ember-cli-htmlbars-inline-precompile": "^0.3.3",
    "ember-cli-inject-live-reload": "^1.4.1",
    "ember-cli-qunit": "^3.0.1",
    "ember-cli-release": "^0.2.9",
    "ember-cli-sri": "^2.1.0",
    "ember-cli-test-loader": "^1.1.0",
    "ember-cli-uglify": "^1.2.0",
    "ember-data": "^2.10.0",
    "ember-disable-prototype-extensions": "^1.1.0",
    "ember-export-application-global": "^1.0.5",
    "ember-load-initializers": "^0.5.1",
    "ember-resolver": "^2.0.3",
    "eslint-config-ticketfly-base": "^2.0.0",
    "loader.js": "^4.0.10",
    "mocha": "^3.2.0"
  },
  "directories": {
    "doc": "doc",
    "test": "tests"
  },
  "ember-addon": {
    "configPath": "tests/dummy/config"
  },
  "engines": {
    "node": ">= 0.12.0"
  },
  "gitHead": "98a6980511a7affb24b4756af141920b64c60799",
  "keywords": [
    "ember-addon"
  ],
  "license": "MIT",
  "name": "ticketfly-metrics",
  "optionalDependencies": {},
  "readme": "# Ticketfly Metrics\n\nThis addon is a wrapper around [`ember-metrics`](https://github.com/poteto/ember-metrics) that gives some\ndefault behavior for Ticketfly Ember apps to use our metrics collection service, Segment, and our monitoring\nservice, New Relic.\n\nThere are three parts of this addon for using, testing, and deploying with metrics collection.\n\n## Installation\n\nThis package will need to be installed from Github (as we are not yet publishing to npm). After installing,\nbe sure to run the default blueprint (this will give you the test helpers specified below).\n\n```sh\nember install Ticketfly/ticketfly-metrics\nember generate ticketfly-metrics default\n```\n\n## Track Routing by Default\n\nIf you would like your application to automatically track all page transitions, then in your `router.js` file,\nreplace Ember's router with the `ticketfly-metrics` router:\n\n```js\n// router.js\nimport EmberRouter from 'ticketfly-metrics/router';\nimport config from './config/environment';\n\nconst Router = EmberRouter.extend({\n  location: config.locationType,\n  rootURL: config.rootURL\n});\n\nRouter.map(function() {\n  this.route('metrics', { path: 'my-metrics' });\n});\n\nexport default Router;\n```\n\nWhen you add router tracking, for every transition, a `trackPage` event will be triggered with two attributes:\n\n* `page`: This is the URL (excluding the host) of the page\n* `title`: This is the name of the route. Something like `transfers.new.index`\n\nIf you want to customize the track page so that it includes contextual information based on the model of the route,\nyou can add a `metricsForModel` hook to your route.\n\nLet's assume this is our route for `metrics`:\n\n```js\n// app/routes/metrics.js\nexport default Route.extend({\n  model() {\n    return { name: 'Spencer' };\n  },\n\n  metricsForModel(model) {\n    return {\n      name: model.name\n    };\n  }\n});\n```\n\nThen, when you hit this route, the object that gets passed to `trackPage` would be:\n\n```js\n{\n  page: '/my-metrics',\n  title: 'metrics',\n  name: 'Spencer'\n}\n```\n\nIf your model is asynchronous, then you can return a promise from `metricsForModel` and that will delay the\n`trackPage` event to be fired until after the model has resolved.\n\nYou may also use the `metricsForModel` hook to overwrite the defaults for `page` and `title`.\n\nPlease note that this is cascading — so all parent routes will also use the `metricsForModel` hook to\nadd to the `trackPage` event. It is overwritten so that the leaf route takes precedent.\n\n## Segment Configuration\n\nAdding tracking is opt-in, so you will have to update your `config/environment.js` to use the default\nconfiguration from this addon.\n\n```js\n// config/environment.js\nconst { configSegment } = require('ticketfly-metrics');\n\nmodule.exports = function(environment) {\n  const ENV = {\n    // ... Other configuration ...\n    metricsAdapters: configSegment(environment, {})\n  };\n};\n```\n\nUsing this default configuration will enable you to _test_ for metrics calls (see below) — however,\nit will not actually send metrics to any of the metrics services. To do that, we need to get a Segment\nkey for each of the respective environments that we would like to collect metrics in.\n\nSuppose your keys are:\n\n```txt\nDev (All):  71c42bf0\nStg 02:     8306dd06\nProd 02:    1dd16e15\n```\n\nThen, in your configuration, add:\n\n```js\nvar ENV = {\n  metricsAdapters: configSegment(environment, {\n    segmentKeys: {\n      dev$: '71c42bf0',\n      stg02: '8306dd06',\n      prod02: '1dd16e15'\n    }\n  })\n};\n```\n\nThe keys of the options object refer to the `process.env.TFLY_DEPLOY_TARGET` value which is made availalble\nduring deploys done in Rundeck. (See https://github.com/Ticketfly/ember-cli-deploy-ticketfly) for more\ninformation about deploys.\n\nAdding a `$` to the end of the key enables it to match any environment\nthat _starts_ with everything preceding it.\n\nAlso, if a environment is _not_ specified, then the `metrics` service will not attempt to send\nany of these metrics to Segment. However, the testing support will still be available. (This is\nuseful in an Addon/Engine as it will never send stuff to Segment itself — the host app will.)\n\n## New Relic Configuration\n\nAdding new relic is opt-in, so you will have to update your `config/environment.js` to use the default\nconfiguration from this addon.\n\n```js\n// config/environment.js\nconst { configNewRelic, targets } = require('ticketfly-metrics');\n\nmodule.exports = function(environment) {\n  var ENV = {\n    // ... Other configuration ...\n    newRelic: configNewRelic(environment, {})\n  };\n};\n```\n\nUsing this default configuration will NOT enable New Relic. To do that, we need to get a New Relic\napplication ID and license key for each of the respective environments that we would like to\nmonitor.\n\nSuppose your keys are:\n\n```txt\n            license Key   ApplicationID\nDev (All):  71c42bf0      898udb2\nStg 02:     8306dd06      12hs823\nProd 02:    1dd16e15      928ju29\n```\n\nThen, in your configuration, add:\n\n```js\nvar ENV = {\n  newRelic: configNewRelic(environment, {\n    nrKeys: {\n      dev$: { licenseKey:'71c42bf0', applicationID: '898udb2' },\n      stg02: { licenseKey:'8306dd06', applicationID: '12hs823' },\n      prod02: { licenseKey:'1dd16e15', applicationID: '928ju29' }\n    }\n  })\n};\n```\n\nThe keys of the options object refer to the `process.env.ENVIRONMENT` value which is made availalble\nduring deploys done in Rundeck. (See https://github.com/Ticketfly/ember-cli-deploy-ticketfly) for more\ninformation about deploys.\n\nAlso, if a environment is _not_ specified, then New Relic will not be included on the page.\n\n## Testing\n\nThe best way to test the functionality of how/when metrics are generated, you can use the `queryMetrics` test\nhelper to check to see which metrics have been collected.\n\nThere are two assumptions for the following tests — first is that we've used the `ticketfly-router` from above. The second\nis that we have the following controller and template:\n\n```js\n// app/controllers/my-page.js\nimport Controller from 'ember-controller';\nimport service from 'ember-service/inject';\nimport get from 'ember-metal/get';\n\nexport default Controller.extend({\n  metrics: service(),\n\n  actions: {\n    firstAction() {\n      const event = 'Event Numero Uno!';\n      get(this, 'metrics').trackEvent({ event });\n    },\n    secondAction() {\n      const event = 'Event Number Two';\n      get(this, 'metrics').trackEvent({ event });\n    }\n  }\n});\n```\n\n```hbs\n{{! app/templates/my-page.hbs }}\n<button class=\"first-action\" {{action 'firstAction'}}>\n  Do the first thing!\n</button>\n\n<button class=\"second-action\" {{action 'secondAction'}}>\n  Do the second thing!\n</button>\n\n```\n\n```js\n// tests/acceptance/my-page-test.js\n\ntest('visiting /my-page', function(assert) {\n  visit('/my-page');\n\n  andThen(() => {\n    const trackPage = queryMetrics('trackPage');\n\n    assert.equal(currentURL(), '/my-page');\n    assert.equal(trackPage.length, 1);\n    assert.deepEqual(trackPage.first, {\n      page: '/my-page',\n      title: 'my-page'\n    });\n\n    click('.first-action');\n    click('.second-action');\n  });\n\n  andThen(() => {\n    const trackEvent = queryMetrics('trackEvent');\n    const uno = trackEvent.where({ event: 'Event Numero Uno!' });\n\n    assert.equal(trackEvent.length, 2, 'there are 2 events');\n    assert.ok(uno.first, 'there is a metrics item for event 1');\n  });\n});\n```\n\nThe `queryMetrics` supports the four different types of events that `ember-metrics` supports\n\n* `identify`\n* `trackEvent`\n* `trackPage`\n* `alias`\n\nThis will return a instance of a database-like class that you can query for the metrics events\nthat you are checking for.\n\nSo, if we had done:\n\n```js\nmetrics.identify({\n  firstName: 'Spencer',\n  lastName: 'Price',\n  id: '1234'\n});\n\nmetrics.trackEvent({ event: 'Did the thing.' });\nmetrics.trackEvent({ event: 'Did the other thing.' });\nmetrics.trackEvent({ event: 'Did the thing.', show: 'Rufus Wainwright' });\n```\n\nThen, these events would be query-able like so:\n\n```js\nconst identify = queryMetrics('identify').where({\n  firstName: 'Spencer'\n}).first;\n\nconsole.log(identify); // { firstName: 'Spencer', lastName: 'Price', id: '1234' }\n\nconst shows = queryMetrics('trackEvent').where({ event: 'Did the thing.' });\nconsole.log(shows.length); // 2\n\nconst rufusShows = shows.where({ show: 'Rufus Wainwright' });\nconsole.log(rufusShows.length); // 1\n```\n",
  "readmeFilename": "README.md",
  "repository": "",
  "scripts": {
    "build": "ember build",
    "node:test": "mocha ./node-tests",
    "start": "ember server",
    "test": "ember try:each"
  },
  "version": "0.1.0"
}
