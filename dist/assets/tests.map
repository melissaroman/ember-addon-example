{"version":3,"sources":["vendor/ember-cli/tests-prefix.js","dummy/tests/acceptance/accept-flow-test.js","dummy/tests/acceptance/tta-flow-test.js","dummy/tests/app.lint-test.js","dummy/tests/helpers/destroy-app.js","dummy/tests/helpers/ember-i18n/test-helpers.js","dummy/tests/helpers/ember-keyboard/register-test-helpers.js","dummy/tests/helpers/ember-simple-auth.js","dummy/tests/helpers/flash-message.js","dummy/tests/helpers/module-for-acceptance.js","dummy/tests/helpers/module-for-integration.js","dummy/tests/helpers/resolver.js","dummy/tests/helpers/responsive.js","dummy/tests/helpers/setup-mirage-for-integration.js","dummy/tests/helpers/start-app.js","dummy/tests/helpers/test-module-for-engine.js","dummy/tests/helpers/ticketfly-metrics-test-helper.js","dummy/tests/integration/components/tta-accept-completed-tickets-test.js","dummy/tests/integration/components/tta-accept-header-test.js","dummy/tests/integration/components/tta-accept-test.js","dummy/tests/integration/components/tta-accept-ticket-row-test.js","dummy/tests/integration/components/tta-block-body-scroll-test.js","dummy/tests/integration/components/tta-confirmation-modal-test.js","dummy/tests/integration/components/tta-event-info-test.js","dummy/tests/integration/components/tta-grouped-tickets-test.js","dummy/tests/integration/components/tta-if-resolved-test.js","dummy/tests/integration/components/tta-modal-test.js","dummy/tests/integration/components/tta-personal-message-test.js","dummy/tests/integration/components/tta-same-user-modal-test.js","dummy/tests/integration/components/tta-selected-list-test.js","dummy/tests/integration/components/tta-show-hide-test.js","dummy/tests/integration/components/tta-show-hide/expand-button-test.js","dummy/tests/integration/components/tta-show-hide/visible-content-test.js","dummy/tests/integration/components/tta-ticket-row-test.js","dummy/tests/integration/components/tta-ticket-status-test.js","dummy/tests/integration/components/tta-toasts-test.js","dummy/tests/integration/components/tta-topbar-test.js","dummy/tests/integration/components/tta-topbar/bar-action-test.js","dummy/tests/integration/components/tta-topbar/bar-title-test.js","dummy/tests/integration/components/tta-transfer-error-test.js","dummy/tests/integration/components/tta-transfer-test.js","dummy/tests/integration/components/tta-validating-input-test.js","dummy/tests/integration/models/marketing-membership-test.js","dummy/tests/integration/models/tickets-test.js","dummy/tests/integration/models/transfer-test.js","dummy/tests/integration/models/user-test.js","dummy/tests/template-deprecations-test.js","dummy/tests/test-helper.js","dummy/tests/tests.lint-test.js","dummy/tests/unit/adapters/application-test.js","dummy/tests/unit/adapters/marketing-membership-test.js","dummy/tests/unit/adapters/ticket-test.js","dummy/tests/unit/adapters/ticket-transfer-test.js","dummy/tests/unit/adapters/user-test.js","dummy/tests/unit/controllers/accept/confirm-test.js","dummy/tests/unit/controllers/new-test.js","dummy/tests/unit/controllers/new/modal/cancel-test.js","dummy/tests/unit/controllers/new/modal/confirm-test.js","dummy/tests/unit/helpers/array-copy-test.js","dummy/tests/unit/helpers/barcode-obfuscator-test.js","dummy/tests/unit/helpers/line-breaker-test.js","dummy/tests/unit/helpers/tta-inc-test.js","dummy/tests/unit/helpers/tta-section-details-test.js","dummy/tests/unit/helpers/tta-transfer-state-test.js","dummy/tests/unit/mixins/new-transfer-state-model-test.js","dummy/tests/unit/models/event-test.js","dummy/tests/unit/models/marketing-membership-test.js","dummy/tests/unit/models/ticket-test.js","dummy/tests/unit/models/ticket-transfer-test.js","dummy/tests/unit/models/user-test.js","dummy/tests/unit/routes/accept-test.js","dummy/tests/unit/routes/accept/confirm-test.js","dummy/tests/unit/routes/accept/confirm/terms-test.js","dummy/tests/unit/routes/accept/index-test.js","dummy/tests/unit/routes/accept/success-test.js","dummy/tests/unit/routes/application-test.js","dummy/tests/unit/routes/new-test.js","dummy/tests/unit/routes/new/modal-test.js","dummy/tests/unit/routes/new/modal/cancel-test.js","dummy/tests/unit/routes/new/modal/confirm-test.js","dummy/tests/unit/routes/new/modal/index-test.js","dummy/tests/unit/routes/new/modal/success-test.js","dummy/tests/unit/routes/new/modal/terms-test.js","dummy/tests/unit/serializers/application-test.js","dummy/tests/unit/serializers/event-test.js","dummy/tests/unit/serializers/marketing-membership-test.js","dummy/tests/unit/serializers/ticket-test.js","dummy/tests/unit/serializers/ticket-transfer-test.js","dummy/tests/unit/serializers/user-test.js","dummy/tests/unit/services/transfers-test.js","vendor/ember-cli/tests-suffix.js"],"sourcesContent":["'use strict';\n","define('dummy/tests/acceptance/accept-flow-test', ['qunit', 'ember-hook', 'dummy/tests/helpers/module-for-acceptance', 'ticket-transfer-addon/mirage/scenarios/create-transfer', 'dummy/tests/helpers/ember-simple-auth'], function (_qunit, _emberHook, _moduleForAcceptance, _createTransfer16, _emberSimpleAuth) {\n  'use strict';\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  (0, _moduleForAcceptance.default)('Acceptance | accept flow', {});\n\n  (0, _qunit.test)('can accept tickets and it tracks the actions', function (assert) {\n    var user = server.create('user');\n\n    var _createTransfer = (0, _createTransfer16.default)(server),\n        transfer = _createTransfer.transfer,\n        _createTransfer$event = _slicedToArray(_createTransfer.events, 1),\n        event = _createTransfer$event[0],\n        acceptanceToken = _createTransfer.transfer.acceptanceToken;\n\n    var queryString = '?acceptanceToken=' + acceptanceToken;\n\n    authenticate(this.application, user);\n\n    visit('/transfers/accept/' + transfer.id + queryString);\n\n    andThen(function () {\n      assert.equal(find((0, _emberHook.$hook)('tta_same_user_warning')).length, 0, 'the same user warning is not visible in this case');\n      assert.ok(!server.db.marketingMemberships.length, 'there are no marketing memberships');\n      assert.equal(currentURL(), '/transfers/accept/' + transfer.id + '/confirm' + queryString);\n      click((0, _emberHook.$hook)('tta_accept_button'));\n\n      var trackPage = queryMetrics('trackPage');\n      var first = trackPage.first;\n\n\n      assert.equal(trackPage.length, 1, 'this page visit was tracked');\n      assert.equal(first.eventName, event.name, 'we tracked the event name');\n      assert.equal(first.eventId, event.id, 'we tracked the event id');\n      assert.equal(first.orgId, event.organizationId, 'we tracked the orgId');\n      assert.equal(first.orgName, event.organizationName, 'we tracked the orgName');\n\n      var aliasUser = queryMetrics('alias');\n\n      assert.equal(aliasUser.length, 1, 'the alias user metrics was created');\n      assert.deepEqual(aliasUser.first, { alias: user.id }, 'alias was sent with user id');\n\n      var identifyUser = queryMetrics('identify');\n\n      assert.equal(identifyUser.length, 1, 'the alias user metrics was created');\n      assert.deepEqual(identifyUser.first, {\n        distinctId: user.id,\n        firstName: user.firstName,\n        lastName: user.lastName\n      }, 'alias was sent with user id');\n    });\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/accept/' + transfer.id + '/success' + queryString);\n\n      var updatedTransfer = server.schema.ticketTransfers.find(transfer.id);\n      var length = updatedTransfer.ticketIds.length;\n\n      assert.equal(updatedTransfer.status, 'COMPLETED', 'the transfer was accepted');\n      assert.equal(length, 4, 'all four tickets were accepted');\n      assert.equal((0, _emberHook.$hook)('tta_accept_header_text').text().trim(), transfer.senderFirstName + ' sent you tickets.');\n      assert.equal((0, _emberHook.$hook)('tta_accept_success_message').text().trim(), 'Tickets accepted!', 'there is a success message');\n      assert.ok(server.db.marketingMemberships.length, 'a marketing memberships was created and saved');\n\n      var _queryMetrics = queryMetrics('trackEvent'),\n          first = _queryMetrics.first;\n\n      assert.deepEqual(first, {\n        event: 'transfer acceptance',\n        isProbablyNewUser: false,\n        transferId: transfer.id,\n        marketingPreferenceOptIn: true,\n        newOptInToOrg: false,\n        changedMarketingPreference: false,\n        numberOfTicketsAccepted: length\n      }, 'the transfer acceptance event metric was sent');\n    });\n  });\n\n  (0, _qunit.test)('cannot directly navigate to success screen', function (assert) {\n    var user = server.create('user');\n\n    var _createTransfer2 = (0, _createTransfer16.default)(server),\n        transfer = _createTransfer2.transfer,\n        acceptanceToken = _createTransfer2.transfer.acceptanceToken;\n\n    var queryString = '?acceptanceToken=' + acceptanceToken;\n\n    authenticate(this.application, user);\n\n    visit('/transfers/accept/' + transfer.id + '/success' + queryString);\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/accept/' + transfer.id + '/confirm' + queryString);\n    });\n  });\n\n  (0, _qunit.test)('the promotions checkbox will default to checked if it has a truthy marketing preference', function (assert) {\n    var user = server.create('user');\n\n    var _createTransfer3 = (0, _createTransfer16.default)(server, {\n      createMarketingPreference: true,\n      marketingPreferenceConfig: {\n        emailSubscription: true,\n        userId: user.id\n      }\n    }),\n        transfer = _createTransfer3.transfer,\n        acceptanceToken = _createTransfer3.transfer.acceptanceToken,\n        _createTransfer3$mark = _slicedToArray(_createTransfer3.marketingMemberships, 1),\n        pref = _createTransfer3$mark[0];\n\n    var queryString = '?acceptanceToken=' + acceptanceToken;\n    authenticate(this.application, user);\n\n    visit('/transfers/accept/' + transfer.id + queryString);\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/accept/' + transfer.id + '/confirm' + queryString);\n      assert.ok((0, _emberHook.$hook)('tta_accept_promotions').find('input').is(':checked'), 'the checkbox is checked');\n\n      click((0, _emberHook.$hook)('tta_accept_promotions').find('input'));\n      click((0, _emberHook.$hook)('tta_accept_button'));\n    });\n\n    andThen(function () {\n      var updatedPref = server.db.marketingMemberships.find(pref.id);\n      assert.equal(updatedPref.emailSubscription, false, 'the marketing preference was updated');\n\n      var _queryMetrics2 = queryMetrics('trackEvent'),\n          first = _queryMetrics2.first;\n\n      assert.equal(first.marketingPreferenceOptIn, false, 'opt in event was false');\n      assert.equal(first.changedMarketingPreference, true, 'opt in event was changed');\n      assert.equal(first.newOptInToOrg, false, 'is new opt in to org');\n    });\n  });\n\n  (0, _qunit.test)('the promotions checkbox will default to unchecked if it has a falsey marketing preference', function (assert) {\n    var user = server.create('user');\n\n    var _createTransfer4 = (0, _createTransfer16.default)(server, {\n      createMarketingPreference: true,\n      marketingPreferenceConfig: {\n        emailSubscription: false,\n        userId: user.id\n      }\n    }),\n        transfer = _createTransfer4.transfer,\n        acceptanceToken = _createTransfer4.transfer.acceptanceToken,\n        _createTransfer4$mark = _slicedToArray(_createTransfer4.marketingMemberships, 1),\n        pref = _createTransfer4$mark[0];\n\n    var queryString = '?acceptanceToken=' + acceptanceToken;\n    authenticate(this.application, user);\n\n    visit('/transfers/accept/' + transfer.id + queryString);\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/accept/' + transfer.id + '/confirm' + queryString);\n      assert.ok(!(0, _emberHook.$hook)('tta_accept_promotions').find('input').is(':checked'), 'the checkbox is not checked');\n\n      click((0, _emberHook.$hook)('tta_accept_promotions').find('input'));\n      click((0, _emberHook.$hook)('tta_accept_button'));\n    });\n\n    andThen(function () {\n      var updatedPref = server.db.marketingMemberships.find(pref.id);\n      assert.equal(updatedPref.emailSubscription, true, 'the marketing preference was updated');\n\n      var _queryMetrics3 = queryMetrics('trackEvent'),\n          first = _queryMetrics3.first;\n\n      assert.equal(first.marketingPreferenceOptIn, true, 'opt in event was false');\n      assert.equal(first.changedMarketingPreference, true, 'opt in event was changed');\n      assert.equal(first.newOptInToOrg, true, 'is new opt in to org');\n    });\n  });\n\n  (0, _qunit.test)('is redirected to login screen if accepting, but not logged in', function (assert) {\n    var _this = this;\n\n    var user = server.create('user');\n\n    var _createTransfer5 = (0, _createTransfer16.default)(server),\n        transfer = _createTransfer5.transfer,\n        acceptanceToken = _createTransfer5.transfer.acceptanceToken;\n\n    var queryString = '?acceptanceToken=' + acceptanceToken;\n\n    visit('/transfers/accept/' + transfer.id + queryString);\n\n    andThen(function () {\n      assert.equal(currentURL(), '/test-login');\n      authenticate(_this.application, user);\n    });\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/accept/' + transfer.id + '/confirm' + queryString, 'after logging in, we are taken back to accept');\n    });\n  });\n\n  (0, _qunit.test)('can show error on unsuccessful accept', function (assert) {\n    var user = server.create('user');\n\n    var _createTransfer6 = (0, _createTransfer16.default)(server, {\n      transferTraits: ['errorsOnTransfer']\n    }),\n        transfer = _createTransfer6.transfer,\n        acceptanceToken = _createTransfer6.transfer.acceptanceToken;\n\n    var queryString = '?acceptanceToken=' + acceptanceToken;\n\n    authenticate(this.application, user);\n\n    visit('/transfers/accept/' + transfer.id + queryString);\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/accept/' + transfer.id + '/confirm' + queryString);\n      click((0, _emberHook.$hook)('tta_accept_button'));\n    });\n\n    andThen(function () {\n      assert.equal((0, _emberHook.$hook)('tta_toast').text().trim(), 'We are unable to complete your request. Please try again later.', 'there is an error toast');\n      assert.equal(currentURL(), '/transfers/accept/' + transfer.id + '/confirm' + queryString);\n\n      var _queryMetrics4 = queryMetrics('trackEvent'),\n          first = _queryMetrics4.first;\n\n      assert.equal(first.event, 'error on transfer acceptance', 'the error tracking event was sent');\n      assert.ok(first.error.indexOf('Error: Assertion Failed: `AdapterError` expects json-api formatted errors array.') > -1, 'the error message was also send');\n    });\n  });\n\n  (0, _qunit.test)('cancelled transfer state is displayed properly', function (assert) {\n    var user = server.create('user');\n\n    var _createTransfer7 = (0, _createTransfer16.default)(server, {\n      transferTraits: ['cancelledStatus']\n    }),\n        transfer = _createTransfer7.transfer,\n        acceptanceToken = _createTransfer7.transfer.acceptanceToken;\n\n    authenticate(this.application, user);\n\n    var queryString = '?acceptanceToken=' + acceptanceToken;\n\n    visit('/transfers/accept/' + transfer.id + queryString);\n\n    andThen(function () {\n      assert.equal((0, _emberHook.$hook)('tta_accept_header_text').text().trim(), 'Ticket transfer cancelled.');\n      assert.equal((0, _emberHook.$hook)('tta_accept_complete_ticket_row_status').eq(0).text().trim(), 'Cancelled');\n    });\n  });\n\n  (0, _qunit.test)('declined transfer state is displayed properly', function (assert) {\n    var user = server.create('user');\n\n    var _createTransfer8 = (0, _createTransfer16.default)(server, {\n      transferTraits: ['deniedStatus']\n    }),\n        transfer = _createTransfer8.transfer,\n        acceptanceToken = _createTransfer8.transfer.acceptanceToken;\n\n    authenticate(this.application, user);\n\n    var queryString = '?acceptanceToken=' + acceptanceToken;\n\n    visit('/transfers/accept/' + transfer.id + queryString);\n\n    andThen(function () {\n      assert.equal((0, _emberHook.$hook)('tta_accept_header_text').text().trim(), 'Ticket transfer declined.');\n      assert.equal((0, _emberHook.$hook)('tta_accept_complete_ticket_row_status').eq(0).text().trim(), 'Declined');\n    });\n  });\n\n  (0, _qunit.test)('already accepted transfer state is displayed properly', function (assert) {\n    var user = server.create('user');\n\n    var _createTransfer9 = (0, _createTransfer16.default)(server, {\n      transferTraits: ['acceptedStatus']\n    }),\n        transfer = _createTransfer9.transfer,\n        acceptanceToken = _createTransfer9.transfer.acceptanceToken;\n\n    authenticate(this.application, user);\n\n    var queryString = '?acceptanceToken=' + acceptanceToken;\n\n    visit('/transfers/accept/' + transfer.id + queryString);\n\n    andThen(function () {\n      assert.equal((0, _emberHook.$hook)('tta_accept_header_text').text().trim(), 'You can no longer accept this transfer because it has already been accepted.', 'message regarding tickets already having been accepted');\n    });\n  });\n\n  (0, _qunit.test)('not acceptable acceptanceState is displayed properly', function (assert) {\n    var user = server.create('user');\n\n    var _createTransfer10 = (0, _createTransfer16.default)(server, {\n      transferTraits: ['notAcceptableStatus']\n    }),\n        transfer = _createTransfer10.transfer,\n        acceptanceToken = _createTransfer10.transfer.acceptanceToken;\n\n    authenticate(this.application, user);\n\n    var queryString = '?acceptanceToken=' + acceptanceToken;\n\n    visit('/transfers/accept/' + transfer.id + queryString);\n\n    andThen(function () {\n      assert.equal((0, _emberHook.$hook)('tta_accept_header_text').text().trim().replace(/[\\s\\n]+/g, ' '), 'You can no longer accept this transfer. Status: Invalid / Scanned', 'message regarding tickets acceptance status');\n    });\n  });\n\n  (0, _qunit.test)('user is prompted to enter first name / last name if no existing first name / last name is found', function (assert) {\n    var user = server.create('user', {\n      firstName: '',\n      lastName: ''\n    });\n\n    var _createTransfer11 = (0, _createTransfer16.default)(server),\n        transfer = _createTransfer11.transfer,\n        acceptanceToken = _createTransfer11.transfer.acceptanceToken;\n\n    var queryString = '?acceptanceToken=' + acceptanceToken;\n\n    authenticate(this.application, user);\n\n    visit('/transfers/accept/' + transfer.id + queryString);\n\n    var prevUrl = void 0;\n    andThen(function () {\n      prevUrl = currentURL();\n      fillIn((0, _emberHook.$hook)('tta_validating_input').eq(0), 'Spencer');\n      keyEvent((0, _emberHook.$hook)('tta_validating_input').eq(0), 'keyup');\n      click((0, _emberHook.$hook)('tta_accept_button'));\n    });\n\n    andThen(function () {\n      assert.equal(prevUrl, currentURL(), 'the accept click was blocked due to invalid name');\n      fillIn((0, _emberHook.$hook)('tta_validating_input').eq(1), 'Price');\n      keyEvent((0, _emberHook.$hook)('tta_validating_input').eq(1), 'keyup');\n    });\n\n    andThen(function () {\n      click((0, _emberHook.$hook)('tta_accept_button'));\n    });\n\n    andThen(function () {\n      var dbUser = server.db.users.find(user.id);\n\n      assert.notEqual(prevUrl, currentURL(), 'with a valid name, we have proceeded');\n      assert.equal(dbUser.firstName, 'Spencer');\n      assert.equal(dbUser.lastName, 'Price');\n\n      var identifyUser = queryMetrics('identify');\n\n      assert.deepEqual(identifyUser.first, {\n        distinctId: user.id,\n        firstName: '',\n        lastName: ''\n      }, 'the original identify did not include names');\n\n      assert.deepEqual(identifyUser.last, {\n        distinctId: user.id,\n        firstName: 'Spencer',\n        lastName: 'Price'\n      }, 'the subsequent identify did include names');\n\n      var _queryMetrics5 = queryMetrics('trackEvent'),\n          isProbablyNewUser = _queryMetrics5.first.isProbablyNewUser;\n\n      assert.ok(isProbablyNewUser, 'metrics track this as `probablyANewUser`');\n    });\n  });\n\n  (0, _qunit.test)('user is not prompted to enter first name / last name if existing first name / last name is found', function (assert) {\n    var user = server.create('user', {\n      firstName: 'Spencer',\n      lastName: 'Price'\n    });\n\n    var _createTransfer12 = (0, _createTransfer16.default)(server),\n        transfer = _createTransfer12.transfer,\n        acceptanceToken = _createTransfer12.transfer.acceptanceToken;\n\n    var queryString = '?acceptanceToken=' + acceptanceToken;\n\n    authenticate(this.application, user);\n\n    visit('/transfers/accept/' + transfer.id + queryString);\n\n    andThen(function () {\n      assert.equal(find((0, _emberHook.$hook)('tta_validating_input').eq(0)).length, 0);\n      assert.equal(find((0, _emberHook.$hook)('tta_validating_input').eq(1)).length, 0);\n    });\n\n    andThen(function () {\n      var dbUser = server.db.users.find(user.id);\n\n      assert.equal(dbUser.firstName, 'Spencer');\n      assert.equal(dbUser.lastName, 'Price');\n    });\n  });\n\n  (0, _qunit.test)('if user has either a first or last name, but not both, inputs are displayed and contain name', function (assert) {\n    var user = server.create('user', {\n      firstName: 'Spencer',\n      lastName: ''\n    });\n\n    var _createTransfer13 = (0, _createTransfer16.default)(server),\n        transfer = _createTransfer13.transfer,\n        acceptanceToken = _createTransfer13.transfer.acceptanceToken;\n\n    var queryString = '?acceptanceToken=' + acceptanceToken;\n\n    authenticate(this.application, user);\n\n    visit('/transfers/accept/' + transfer.id + queryString);\n\n    andThen(function () {\n      assert.equal(find((0, _emberHook.$hook)('tta_validating_input').eq(0)).val(), 'Spencer');\n      assert.equal(find((0, _emberHook.$hook)('tta_validating_input').eq(1)).val(), '');\n    });\n  });\n\n  (0, _qunit.test)('can view and leave the terms and conditions', function (assert) {\n    var user = server.create('user');\n\n    var _createTransfer14 = (0, _createTransfer16.default)(server),\n        transfer = _createTransfer14.transfer,\n        acceptanceToken = _createTransfer14.transfer.acceptanceToken;\n\n    var queryString = '?acceptanceToken=' + acceptanceToken;\n\n    authenticate(this.application, user);\n\n    visit('/transfers/accept/' + transfer.id + queryString);\n\n    andThen(function () {\n      click((0, _emberHook.$hook)('tta_accept_tandc'));\n    });\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/accept/' + transfer.id + '/confirm/terms' + queryString);\n\n      click((0, _emberHook.$hook)('tta_accept_tandc_back'));\n    });\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/accept/' + transfer.id + '/confirm' + queryString);\n\n      click((0, _emberHook.$hook)('tta_accept_tandc'));\n    });\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/accept/' + transfer.id + '/confirm/terms' + queryString);\n\n      keyPress('Escape');\n    });\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/accept/' + transfer.id + '/confirm' + queryString);\n    });\n  });\n\n  (0, _qunit.test)('an alert is shown if the user is accepting to itself', function (assert) {\n    var user = server.create('user');\n\n    var _createTransfer15 = (0, _createTransfer16.default)(server, {\n      transferConfig: {\n        senderEmail: user.email\n      }\n    }),\n        transfer = _createTransfer15.transfer,\n        acceptanceToken = _createTransfer15.transfer.acceptanceToken;\n\n    var queryString = '?acceptanceToken=' + acceptanceToken;\n\n    authenticate(this.application, user);\n\n    visit('/transfers/accept/' + transfer.id + queryString);\n\n    andThen(function () {\n      assert.equal(find((0, _emberHook.$hook)('tta_same_user_warning')).length, 1);\n    });\n  });\n\n  function authenticate(application, user) {\n    var session = (0, _emberSimpleAuth.currentSession)(application);\n\n    return (0, _emberSimpleAuth.authenticateSession)(application, {\n      access_token: user._authToken\n    }).then(function () {\n      // This simulates some of Simple Auth's Behavior.\n      var transition = session.get('attemptedTransition');\n      if (transition) {\n        transition.retry();\n      }\n    });\n  }\n});","define('dummy/tests/acceptance/tta-flow-test', ['qunit', 'dummy/tests/helpers/module-for-acceptance', 'ember-hook', 'ticket-transfer-addon/mirage/scenarios/create-order', 'dummy/tests/helpers/ember-simple-auth'], function (_qunit, _moduleForAcceptance, _emberHook, _createOrder8, _emberSimpleAuth) {\n  'use strict';\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  var accessToken = '1234';\n\n  (0, _moduleForAcceptance.default)('Acceptance | tta flow', {\n    beforeEach: function beforeEach() {\n      this.user = server.create('user', {\n        _authToken: accessToken\n      });\n\n      return (0, _emberSimpleAuth.authenticateSession)(this.application, {\n        access_token: accessToken\n      });\n    }\n  });\n\n  (0, _qunit.test)('can escape ticket transfer app', function (assert) {\n    assert.expect(3);\n\n    var _createOrder = (0, _createOrder8.default)(server),\n        _createOrder$tickets = _slicedToArray(_createOrder.tickets, 1),\n        orderId = _createOrder$tickets[0].orderId,\n        _createOrder$events = _slicedToArray(_createOrder.events, 1),\n        eventId = _createOrder$events[0].id;\n\n    visit('/transfers/new/' + orderId + '/' + eventId);\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/new/' + orderId + '/' + eventId, 'routes are injected');\n      assert.equal((0, _emberHook.$hook)('tta_title').text().trim(), 'Transfer Tickets', 'page rendered correctly');\n\n      click((0, _emberHook.$hook)('tta_close_transfer_app'));\n    });\n\n    andThen(function () {\n      assert.equal(currentURL(), '/', 'transfer app closed');\n    });\n  });\n\n  (0, _qunit.test)('can select tickets to transfer and successfully transfer them and track the events', function (assert) {\n    var _this = this;\n\n    setBreakpoint('greaterThanMobile');\n    var orderId = '1';\n\n    var _createOrder2 = (0, _createOrder8.default)(server, {\n      ticketsPerEvent: 4,\n      ticketConfig: {\n        orderId: '1',\n        userId: this.user.id\n      }\n    }),\n        tickets = _createOrder2.tickets,\n        _createOrder2$events = _slicedToArray(_createOrder2.events, 1),\n        event = _createOrder2$events[0];\n\n    visit('/transfers/new/' + orderId + '/' + event.id);\n\n    andThen(function () {\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row').length, tickets.length, 'all tickets are rendered');\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row_checkbox').length, tickets.length, 'and all have checkboxes');\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row_checkbox', { checked: true }).length, 0, 'but none are checked');\n      assert.ok((0, _emberHook.$hook)('tta_transfer_button', { enabled: false }).length, 'the transfer button is disabled');\n\n      var trackPage = queryMetrics('trackPage');\n      var first = trackPage.first;\n\n\n      assert.equal(trackPage.length, 1, 'this page visit was tracked');\n      assert.equal(first.eventName, event.name, 'we tracked the event name');\n      assert.equal(first.eventId, event.id, 'we tracked the event id');\n      assert.equal(first.orgId, event.organizationId, 'we tracked the orgId');\n      assert.equal(first.orgName, event.organizationName, 'we tracked the orgName');\n\n      var aliasUser = queryMetrics('alias');\n      var user = _this.user;\n\n\n      assert.equal(aliasUser.length, 1, 'the alias user metrics was created');\n      assert.deepEqual(aliasUser.first, { alias: user.id }, 'alias was sent with user id');\n\n      var identifyUser = queryMetrics('identify');\n\n      assert.equal(identifyUser.length, 1, 'the alias user metrics was created');\n      assert.deepEqual(identifyUser.first, {\n        distinctId: user.id,\n        firstName: user.firstName,\n        lastName: user.lastName\n      }, 'alias was sent with user id');\n    });\n\n    andThen(function () {\n      click((0, _emberHook.$hook)('tta_ticket_row').eq(0));\n      click((0, _emberHook.$hook)('tta_ticket_row').eq(1));\n    });\n\n    andThen(function () {\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row_checkbox', { checked: true }).length, 2, 'two are checked');\n      assert.ok((0, _emberHook.$hook)('tta_transfer_button', { enabled: false }).length, 'the transfer button is still disabled');\n    });\n\n    andThen(function () {\n      fillIn((0, _emberHook.$hook)('tta_validating_input'), _this.user.email);\n    });\n\n    andThen(function () {\n      assert.ok((0, _emberHook.$hook)('tta_transfer_button', { enabled: false }).length, 'the transfer button is still disabled since attempting to transfer to self');\n      assert.equal((0, _emberHook.$hook)('tta_validating_input_error').text().trim(), 'You cannot transfer these tickets to yourself.');\n\n      fillIn((0, _emberHook.$hook)('tta_validating_input'), 'spencer.price@ticketfly.com');\n    });\n\n    andThen(function () {\n      assert.ok((0, _emberHook.$hook)('tta_transfer_button', { enabled: true }).length, 'the transfer button is enabled');\n\n      // Add a message\n      click((0, _emberHook.$hook)('tta_personal_message_add'));\n    });\n\n    andThen(function () {\n      var input = (0, _emberHook.$hook)('tta_personal_message_input');\n      fillIn(input, 'Enjoy the show!');\n      keyEvent(input, 'keyup');\n      triggerEvent(input, 'blur');\n    });\n\n    andThen(function () {\n      click((0, _emberHook.$hook)('tta_transfer_button'));\n    });\n\n    andThen(function () {\n      assert.ok((0, _emberHook.$hook)('tta_confirmation_modal').length, 'the confirmation modal is visible');\n      keyPress('Escape');\n    });\n\n    andThen(function () {\n      assert.ok(!(0, _emberHook.$hook)('tta_confirmation_modal').length, 'the confirmation modal is hidden after an escape press');\n      click((0, _emberHook.$hook)('tta_transfer_button'));\n    });\n\n    andThen(function () {\n      assert.ok((0, _emberHook.$hook)('tta_confirmation_modal').length, 'the confirmation modal is visible');\n      assert.equal((0, _emberHook.$hook)('tta_grouped_tickets_ticket').length, 2, '2 tickets are being confirmed');\n      assert.equal((0, _emberHook.$hook)('tta_confirmation_modal_email').text().trim(), 'spencer.price@ticketfly.com', 'confirm email is visible');\n\n      // Visit the Terms and Conditions\n      click((0, _emberHook.$hook)('tta_confirmation_modal_tandc'));\n    });\n\n    andThen(function () {\n      assert.ok((0, _emberHook.$hook)('tta_confirmation_modal_tandc_text').length, 'the terms text is visible');\n      click((0, _emberHook.$hook)('tta_confirmation_modal_tandc_back'));\n    });\n\n    andThen(function () {\n      click((0, _emberHook.$hook)('tta_confirmation_modal_transfer_button'));\n    });\n\n    andThen(function () {\n      // TODO: When testing for ember-concurrency gets better, we can add an assert that the Succeess Modal\n      // shows up for a period of time.\n      click((0, _emberHook.$hook)('tta_confirmation_success_done'));\n    });\n\n    andThen(function () {\n      assert.equal((0, _emberHook.$hook)('tta_confirmation_modal').length, 0, 'the confirmation modal is hidden again');\n\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row_transfer_status').length, 2, 'two tickets show transferred status');\n      assert.ok((0, _emberHook.$hook)('tta_ticket_row_transfer_status').eq(0).text().indexOf('spencer.price@ticketfly.com') > -1, 'the email is visible too');\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row_checkbox').length, tickets.length - 2, 'the remaining have checkboxes');\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row', { selected: false }).length, tickets.length, 'all tickets should be deselected');\n      assert.equal((0, _emberHook.$hook)('tta_validating_input').val(), '', 'The email  was cleared');\n      assert.equal((0, _emberHook.$hook)('tta_personal_message_input').val(), '', 'The message input was cleared');\n\n      // Check to see that mirage captured the message.\n\n      var _server$db$ticketTran = _slicedToArray(server.db.ticketTransfers, 1),\n          transfer = _server$db$ticketTran[0];\n\n      assert.equal(transfer.message, 'Enjoy the show!', 'the message was included in the transfer');\n\n      var _queryMetrics = queryMetrics('trackEvent'),\n          first = _queryMetrics.first;\n\n      assert.deepEqual(first, {\n        event: 'created transfer',\n        numberOfTickets: 2,\n        transferId: transfer.id\n      }, 'the transfer creation event was sent');\n    });\n  });\n\n  (0, _qunit.test)('error shows on unsuccessful transfer', function (assert) {\n    var orderId = '1';\n\n    var _createOrder3 = (0, _createOrder8.default)(server, {\n      ticketsPerEvent: 4,\n      ticketTraits: ['errorsOnTransfer'],\n      ticketConfig: {\n        orderId: '1',\n        userId: this.user.id\n      }\n    }),\n        tickets = _createOrder3.tickets,\n        _createOrder3$events = _slicedToArray(_createOrder3.events, 1),\n        eventId = _createOrder3$events[0].id;\n\n    visit('/transfers/new/' + orderId + '/' + eventId);\n\n    andThen(function () {\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row').length, tickets.length, 'all tickets are rendered');\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row_checkbox').length, tickets.length, 'and all have checkboxes');\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row_checkbox', { checked: true }).length, 0, 'but none are checked');\n      assert.ok((0, _emberHook.$hook)('tta_transfer_button', { enabled: false }).length, 'the transfer button is disabled');\n    });\n\n    andThen(function () {\n      click((0, _emberHook.$hook)('tta_ticket_row').eq(0));\n      click((0, _emberHook.$hook)('tta_ticket_row').eq(1));\n    });\n\n    andThen(function () {\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row_checkbox', { checked: true }).length, 2, 'two are checked');\n      assert.ok((0, _emberHook.$hook)('tta_transfer_button', { enabled: false }).length, 'the transfer button is still disabled');\n    });\n\n    andThen(function () {\n      fillIn((0, _emberHook.$hook)('tta_validating_input'), 'spencer.price@ticketfly.com');\n    });\n\n    andThen(function () {\n      assert.ok((0, _emberHook.$hook)('tta_transfer_button', { enabled: true }).length, 'the transfer button is enabled');\n      click((0, _emberHook.$hook)('tta_transfer_button'));\n    });\n\n    andThen(function () {\n      assert.ok((0, _emberHook.$hook)('tta_confirmation_modal').length, 'the confirmation modal is visible');\n      assert.equal((0, _emberHook.$hook)('tta_grouped_tickets_ticket').length, 2, '2 tickets are being confirmed');\n      assert.equal((0, _emberHook.$hook)('tta_confirmation_modal_email').text().trim(), 'spencer.price@ticketfly.com', 'confirm email is visible');\n      click((0, _emberHook.$hook)('tta_confirmation_modal_transfer_button'));\n    });\n\n    andThen(function () {\n      assert.ok((0, _emberHook.$hook)('tta_confirmation_modal').length, 'the confirmation modal is visible again');\n      assert.equal((0, _emberHook.$hook)('tta_toast').text().trim(), 'Your transfer request encountered an error. Please try again later.', 'there is an error toast');\n\n      var _queryMetrics2 = queryMetrics('trackEvent'),\n          first = _queryMetrics2.first;\n\n      assert.equal(first.event, 'error on create transfer', 'an error event was sent');\n      assert.ok('error' in first, 'there is also an error message');\n    });\n  });\n\n  (0, _qunit.test)('error shows when no tickets in an order', function (assert) {\n    var orderId = '1';\n\n    var _createOrder4 = (0, _createOrder8.default)(server, { ticketsPerEvent: 0 }),\n        _createOrder4$events = _slicedToArray(_createOrder4.events, 1),\n        eventId = _createOrder4$events[0].id;\n\n    visit('/transfers/new/' + orderId + '/' + eventId);\n\n    andThen(function () {\n      assert.equal((0, _emberHook.$hook)('tta_transfer_error_text').text().trim(), 'No transferable tickets found.', 'the error is displayed');\n      assert.equal((0, _emberHook.$hook)('tta_toast').text().trim(), 'Error: No transferable tickets.', 'there is an error toast');\n    });\n  });\n\n  (0, _qunit.test)('routes under `new` redirect if a selection has not been made', function (assert) {\n    var orderId = '1';\n\n    var _createOrder5 = (0, _createOrder8.default)(server, {\n      ticketConfig: {\n        orderId: orderId,\n        userId: this.user.id\n      }\n    }),\n        _createOrder5$events = _slicedToArray(_createOrder5.events, 1),\n        eventId = _createOrder5$events[0].id;\n\n    visit('/transfers/new/' + orderId + '/' + eventId + '/m/confirm');\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/new/' + orderId + '/' + eventId, 'routes back to `new`');\n      visit('/transfers/new/' + orderId + '/' + eventId + '/m/terms');\n    });\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/new/' + orderId + '/' + eventId, 'routes back to `new`');\n      visit('/transfers/new/' + orderId + '/' + eventId + '/m/success');\n    });\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/new/' + orderId + '/' + eventId, 'routes back to `new`');\n    });\n  });\n\n  (0, _qunit.test)('can cancel a transfer', function (assert) {\n    setBreakpoint('greaterThanMobile');\n\n    var _createOrder6 = (0, _createOrder8.default)(server, {\n      ticketTraits: ['hasTransfer'],\n      ticketConfig: { userId: this.user.id }\n    }),\n        tickets = _createOrder6.tickets,\n        _createOrder6$tickets = _slicedToArray(_createOrder6.tickets, 1),\n        orderId = _createOrder6$tickets[0].orderId,\n        _createOrder6$events = _slicedToArray(_createOrder6.events, 1),\n        eventId = _createOrder6$events[0].id;\n\n    var transfer = server.schema.ticketTransfers.find(1);\n\n    visit('/transfers/new/' + orderId + '/' + eventId);\n\n    andThen(function () {\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row').length, tickets.length, 'all tickets are rendered');\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row_transfer_status').length, tickets.length, 'and they show a status');\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row_checkbox').length, 0, 'but none have checkboxes');\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row_cancel').length, tickets.length, 'all have a cancel button');\n\n      click((0, _emberHook.$hook)('tta_ticket_row_cancel').eq(0));\n    });\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/new/' + orderId + '/' + eventId + '/m/cancel/' + transfer.id, 'the cancel transfer screen is visible');\n\n      // Go back first.\n      click((0, _emberHook.$hook)('tta_cancel_confirmation_back_button'));\n    });\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/new/' + orderId + '/' + eventId, 'the transfer screen is visible again');\n      click((0, _emberHook.$hook)('tta_ticket_row_cancel').eq(0));\n    });\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/new/' + orderId + '/' + eventId + '/m/cancel/' + transfer.id, 'the cancel transfer screen is visible');\n\n      click((0, _emberHook.$hook)('tta_cancel_confirmation_confirm_button'));\n    });\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/new/' + orderId + '/' + eventId, 'the transfer screen is visible again');\n      assert.equal((0, _emberHook.$hook)('tta_toast').text().trim(), 'Transfer cancelled.', 'there is a success toast');\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row_checkbox').length, 1, 'the ticket is able to be transferred again');\n\n      var _queryMetrics3 = queryMetrics('trackEvent'),\n          first = _queryMetrics3.first;\n\n      assert.deepEqual(first, {\n        event: 'cancelled transfer',\n        numberOfTickets: tickets.length,\n        transferId: transfer.id\n      }, 'a cancellation event was tracked');\n    });\n  });\n\n  (0, _qunit.test)('canceling a transfer with an error shows a toast', function (assert) {\n    setBreakpoint('greaterThanMobile');\n\n    var _createOrder7 = (0, _createOrder8.default)(server, {\n      ticketTraits: ['hasTransfer', 'errorsOnCancelTransfer'],\n      ticketConfig: { userId: this.user.id }\n    }),\n        tickets = _createOrder7.tickets,\n        _createOrder7$tickets = _slicedToArray(_createOrder7.tickets, 1),\n        orderId = _createOrder7$tickets[0].orderId,\n        _createOrder7$events = _slicedToArray(_createOrder7.events, 1),\n        eventId = _createOrder7$events[0].id;\n\n    var transfer = server.schema.ticketTransfers.find(1);\n\n    visit('/transfers/new/' + orderId + '/' + eventId);\n\n    andThen(function () {\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row').length, tickets.length, 'all tickets are rendered');\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row_transfer_status').length, tickets.length, 'and they show a status');\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row_checkbox').length, 0, 'but none have checkboxes');\n      assert.equal((0, _emberHook.$hook)('tta_ticket_row_cancel').length, tickets.length, 'all have a cancel button');\n\n      click((0, _emberHook.$hook)('tta_ticket_row_cancel').eq(0));\n    });\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/new/' + orderId + '/' + eventId + '/m/cancel/' + transfer.id, 'the cancel transfer screen is visible');\n      click((0, _emberHook.$hook)('tta_cancel_confirmation_confirm_button'));\n    });\n\n    andThen(function () {\n      assert.equal(currentURL(), '/transfers/new/' + orderId + '/' + eventId, 'the transfer screen is visible again');\n      assert.equal((0, _emberHook.$hook)('tta_toast').text().trim(), 'We are unable to complete your request. Please try again later.', 'there is a success toast');\n\n      var _queryMetrics4 = queryMetrics('trackEvent'),\n          first = _queryMetrics4.first;\n\n      assert.equal(first.event, 'error on cancel transfer', 'an error event was sent');\n      assert.ok('error' in first, 'there is also an error message');\n    });\n  });\n});","define('dummy/tests/app.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | app');\n\n  QUnit.test('app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('authenticators/oauth2.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'authenticators/oauth2.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('breakpoints.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'breakpoints.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('controllers/dummy-login.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'controllers/dummy-login.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('router.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'router.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/animation-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/animation-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/animation-test/step-1.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/animation-test/step-1.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/animation-test/step-2.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/animation-test/step-2.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/animation-test/step-3.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/animation-test/step-3.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/index.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/index.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('routes/orders/order.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'routes/orders/order.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('transitions.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'transitions.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/helpers/destroy-app', ['exports', 'ember'], function (exports, _ember) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = destroyApp;\n  function destroyApp(application) {\n    _ember.default.run(application, 'destroy');\n    _ember.default.$('.liquid-target-container').remove();\n    server.shutdown();\n  }\n});","define('dummy/tests/helpers/ember-i18n/test-helpers', ['ember'], function (_ember) {\n  'use strict';\n\n  // example usage: find(`.header:contains(${t('welcome_message')})`)\n  _ember.default.Test.registerHelper('t', function (app, key, interpolations) {\n    var i18n = app.__container__.lookup('service:i18n');\n    return i18n.t(key, interpolations);\n  });\n\n  // example usage: expectTranslation('.header', 'welcome_message');\n  _ember.default.Test.registerHelper('expectTranslation', function (app, element, key, interpolations) {\n    var text = app.testHelpers.t(key, interpolations);\n\n    assertTranslation(element, key, text);\n  });\n\n  var assertTranslation = function () {\n    if (typeof QUnit !== 'undefined' && typeof QUnit.assert.ok === 'function') {\n      return function (element, key, text) {\n        QUnit.assert.ok(find(element + ':contains(' + text + ')').length, 'Found translation key ' + key + ' in ' + element);\n      };\n    } else if (typeof expect === 'function') {\n      return function (element, key, text) {\n        var found = !!find(element + ':contains(' + text + ')').length;\n        expect(found).to.equal(true);\n      };\n    } else {\n      return function () {\n        throw new Error(\"ember-i18n could not find a compatible test framework\");\n      };\n    }\n  }();\n});","define('dummy/tests/helpers/ember-keyboard/register-test-helpers', ['exports', 'ember', 'ember-keyboard', 'ember-keyboard/fixtures/modifiers-array', 'ember-keyboard/utils/get-cmd-key'], function (exports, _ember, _emberKeyboard, _modifiersArray, _getCmdKey) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function () {\n    _ember.default.Test.registerAsyncHelper('keyDown', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keydown', element);\n    });\n\n    _ember.default.Test.registerAsyncHelper('keyUp', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keyup', element);\n    });\n\n    _ember.default.Test.registerAsyncHelper('keyPress', function (app, attributes, element) {\n      return keyEvent(app, attributes, 'keypress', element);\n    });\n  };\n\n  var keyEvent = function keyEvent(app, attributes, type, element) {\n    var event = attributes.split('+').reduce(function (event, attribute) {\n      if (_modifiersArray.default.indexOf(attribute) > -1) {\n        attribute = attribute === 'cmd' ? (0, _getCmdKey.default)() : attribute;\n        event[attribute + 'Key'] = true;\n      } else {\n        event.keyCode = (0, _emberKeyboard.getKeyCode)(attribute);\n      }\n\n      return event;\n    }, {});\n\n    return app.testHelpers.triggerEvent(element || document, type, event);\n  };\n});","define('dummy/tests/helpers/ember-simple-auth', ['exports', 'ember-simple-auth/authenticators/test'], function (exports, _test) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.authenticateSession = authenticateSession;\n  exports.currentSession = currentSession;\n  exports.invalidateSession = invalidateSession;\n\n\n  var TEST_CONTAINER_KEY = 'authenticator:test';\n\n  function ensureAuthenticator(app, container) {\n    var authenticator = container.lookup(TEST_CONTAINER_KEY);\n    if (!authenticator) {\n      app.register(TEST_CONTAINER_KEY, _test.default);\n    }\n  }\n\n  function authenticateSession(app, sessionData) {\n    var container = app.__container__;\n\n    var session = container.lookup('service:session');\n    ensureAuthenticator(app, container);\n    session.authenticate(TEST_CONTAINER_KEY, sessionData);\n    return wait();\n  };\n\n  function currentSession(app) {\n    return app.__container__.lookup('service:session');\n  };\n\n  function invalidateSession(app) {\n    var session = app.__container__.lookup('service:session');\n    if (session.get('isAuthenticated')) {\n      session.invalidate();\n    }\n    return wait();\n  };\n});","define('dummy/tests/helpers/flash-message', ['ember', 'ember-cli-flash/flash/object'], function (_ember, _object) {\n  'use strict';\n\n  var K = _ember.default.K;\n\n\n  _object.default.reopen({ init: K });\n});","define('dummy/tests/helpers/module-for-acceptance', ['exports', 'qunit', 'dummy/tests/helpers/start-app', 'dummy/tests/helpers/destroy-app'], function (exports, _qunit, _startApp, _destroyApp) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  exports.default = function (name) {\n    var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n    (0, _qunit.module)(name, {\n      beforeEach: function beforeEach() {\n        this.application = (0, _startApp.default)();\n\n        if (options.beforeEach) {\n          return options.beforeEach.apply(this, arguments);\n        }\n      },\n      afterEach: function afterEach() {\n        var _this = this;\n\n        var afterEach = options.afterEach && options.afterEach.apply(this, arguments);\n        return Promise.resolve(afterEach).then(function () {\n          return (0, _destroyApp.default)(_this.application);\n        });\n      }\n    });\n  };\n\n  var RSVP = Ember.RSVP;\n  var Promise = RSVP.Promise;\n});","define('dummy/tests/helpers/module-for-integration', ['exports', 'ember-runloop', 'qunit', 'ember-test-helpers', 'ember-qunit'], function (exports, _emberRunloop, _qunit, _emberTestHelpers, _emberQunit) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.moduleForIntegration = moduleForIntegration;\n  exports.test = test;\n  var RSVP = Ember.RSVP;\n  var resolve = RSVP.resolve;\n  function moduleForIntegration(name) {\n    var callbacks = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n    var _beforeEach = callbacks.beforeEach,\n        _afterEach = callbacks.afterEach;\n\n    delete callbacks.beforeEach;\n    delete callbacks.afterEach;\n\n    var module = new _emberTestHelpers.TestModuleForIntegration(name, name, callbacks);\n\n    (0, _qunit.module)(module.name, {\n      beforeEach: function beforeEach() {\n        var _this = this,\n            _arguments = arguments;\n\n        module.setContext(this);\n\n        return module.setup.apply(module, arguments).then(function () {\n          if (_beforeEach) {\n            return _beforeEach.apply(_this, _arguments);\n          }\n        });\n      },\n      afterEach: function afterEach() {\n        var _arguments2 = arguments;\n\n        var result = void 0;\n\n        if (_afterEach) {\n          result = _afterEach.apply(this, arguments);\n        }\n\n        return resolve(result).then(function () {\n          return module.teardown.apply(module, _arguments2);\n        });\n      }\n    });\n  }\n\n  function test(name, callback) {\n    return (0, _emberQunit.test)(name, function () {\n      return (0, _emberRunloop.bind)(this, callback).apply(undefined, arguments);\n    });\n  }\n});","define('dummy/tests/helpers/resolver', ['exports', 'dummy/resolver', 'dummy/config/environment'], function (exports, _resolver, _environment) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n\n  var resolver = _resolver.default.create();\n\n  resolver.namespace = {\n    modulePrefix: _environment.default.modulePrefix,\n    podModulePrefix: _environment.default.podModulePrefix\n  };\n\n  exports.default = resolver;\n});","define('dummy/tests/helpers/responsive', ['exports', 'ember', 'ember-responsive/media'], function (exports, _ember, _media) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.setBreakpointForIntegrationTest = setBreakpointForIntegrationTest;\n  var getOwner = _ember.default.getOwner;\n  var classify = _ember.default.String.classify;\n\n\n  _media.default.reopen({\n    // Change this if you want a different default breakpoint in tests.\n    _defaultBreakpoint: 'desktop',\n\n    _breakpointArr: _ember.default.computed('breakpoints', function () {\n      return Object.keys(this.get('breakpoints')) || _ember.default.A([]);\n    }),\n\n    _forceSetBreakpoint: function _forceSetBreakpoint(breakpoint) {\n      var found = false;\n\n      var props = {};\n      this.get('_breakpointArr').forEach(function (bp) {\n        var val = bp === breakpoint;\n        if (val) {\n          found = true;\n        }\n\n        props['is' + classify(bp)] = val;\n      });\n\n      if (found) {\n        this.setProperties(props);\n      } else {\n        throw new Error('You tried to set the breakpoint to ' + breakpoint + ', which is not in your app/breakpoint.js file.');\n      }\n    },\n    match: function match() {},\n    init: function init() {\n      this._super.apply(this, arguments);\n\n      this._forceSetBreakpoint(this.get('_defaultBreakpoint'));\n    }\n  });\n\n  exports.default = _ember.default.Test.registerAsyncHelper('setBreakpoint', function (app, breakpoint) {\n    // this should use getOwner once that's supported\n    var mediaService = app.__deprecatedInstance__.lookup('service:media');\n    mediaService._forceSetBreakpoint(breakpoint);\n  });\n  function setBreakpointForIntegrationTest(container, breakpoint) {\n    var mediaService = getOwner(container).lookup('service:media');\n    mediaService._forceSetBreakpoint(breakpoint);\n    container.set('media', mediaService);\n\n    return mediaService;\n  }\n});","define('dummy/tests/helpers/setup-mirage-for-integration', ['exports', 'dummy/initializers/ember-cli-mirage'], function (exports, _emberCliMirage) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startMirage;\n  function startMirage(container) {\n    _emberCliMirage.default.initialize(container);\n  }\n});","define('dummy/tests/helpers/start-app', ['exports', 'ember-platform', 'ember-runloop', 'dummy/app', 'dummy/config/environment', 'dummy/tests/helpers/ember-keyboard/register-test-helpers', 'dummy/tests/helpers/ticketfly-metrics-test-helper'], function (exports, _emberPlatform, _emberRunloop, _app, _environment, _registerTestHelpers) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.default = startApp;\n  function startApp(attrs) {\n    var application = void 0;\n    var attributes = (0, _emberPlatform.assign)({}, _environment.default.APP, attrs);\n\n    (0, _emberRunloop.default)(function () {\n      application = _app.default.create(attributes);\n      application.setupForTesting();\n      (0, _registerTestHelpers.default)();\n      application.injectTestHelpers();\n    });\n\n    return application;\n  }\n});","define('dummy/tests/helpers/test-module-for-engine', ['exports', 'ember-engines/test-support/engine-resolver-for', 'ember-qunit'], function (exports, _engineResolverFor, _emberQunit) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n  exports.moduleFor = exports.moduleForComponent = undefined;\n\n\n  function moduleForComponent(componentName, testName) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    options.resolver = (0, _engineResolverFor.default)('ticket-transfer-addon');\n    (0, _emberQunit.moduleForComponent)(componentName, testName, options);\n  }\n\n  function moduleFor(registryItem, testName) {\n    var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n    options.resolver = (0, _engineResolverFor.default)('ticket-transfer-addon');\n    (0, _emberQunit.moduleFor)(registryItem, testName, options);\n  }\n\n  exports.moduleForComponent = moduleForComponent;\n  exports.moduleFor = moduleFor;\n});","define('dummy/tests/helpers/ticketfly-metrics-test-helper', ['exports', 'ember-test', 'ember-metal/get'], function (exports, _emberTest, _get) {\n  'use strict';\n\n  Object.defineProperty(exports, \"__esModule\", {\n    value: true\n  });\n\n  function _classCallCheck(instance, Constructor) {\n    if (!(instance instanceof Constructor)) {\n      throw new TypeError(\"Cannot call a class as a function\");\n    }\n  }\n\n  var _createClass = function () {\n    function defineProperties(target, props) {\n      for (var i = 0; i < props.length; i++) {\n        var descriptor = props[i];\n        descriptor.enumerable = descriptor.enumerable || false;\n        descriptor.configurable = true;\n        if (\"value\" in descriptor) descriptor.writable = true;\n        Object.defineProperty(target, descriptor.key, descriptor);\n      }\n    }\n\n    return function (Constructor, protoProps, staticProps) {\n      if (protoProps) defineProperties(Constructor.prototype, protoProps);\n      if (staticProps) defineProperties(Constructor, staticProps);\n      return Constructor;\n    };\n  }();\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  var keys = Object.keys;\n  exports.default = _emberTest.default.registerHelper('queryMetrics', function (app, type) {\n    var segmentStub = getSegmentStub(app);\n    var args = (0, _get.default)(segmentStub, type + '.args') || [];\n\n    // Flatten the args. \n    var flatArgs = args.map(function (_ref) {\n      var _ref2 = _slicedToArray(_ref, 1),\n          record = _ref2[0];\n\n      return record;\n    });\n\n    return new MetricsQueryResult(flatArgs);\n  });\n\n\n  function getSegmentStub(app) {\n    var metrics = app.__container__.lookup('service:metrics');\n    return (0, _get.default)(metrics, '_adapters.SegmentStub');\n  }\n\n  var MetricsQueryResult = function () {\n    function MetricsQueryResult(results) {\n      _classCallCheck(this, MetricsQueryResult);\n\n      this._results = results || [];\n    }\n\n    _createClass(MetricsQueryResult, [{\n      key: 'where',\n      value: function where(query) {\n        var filtered = this._results.filter(function (record) {\n          return keys(query).every(function (key) {\n            return query[key] === record[key];\n          });\n        });\n\n        return new MetricsQueryResult(filtered);\n      }\n    }, {\n      key: 'length',\n      get: function get() {\n        return this._results.length;\n      }\n    }, {\n      key: 'first',\n      get: function get() {\n        return this._results[0];\n      }\n    }, {\n      key: 'last',\n      get: function get() {\n        return this._results[this._results.length - 1];\n      }\n    }]);\n\n    return MetricsQueryResult;\n  }();\n});","define('dummy/tests/integration/components/tta-accept-completed-tickets-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook'], function (_emberQunit, _testModuleForEngine, _emberHook) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-accept-completed-tickets', 'Integration | Component | tta accept completed tickets', {\n    integration: true,\n    beforeEach: function beforeEach() {\n      (0, _emberHook.initialize)();\n    }\n  });\n\n  (0, _emberQunit.test)('it handles the CANCELLED state', function (assert) {\n    this.set('tickets', [{ variantName: 'GA1' }, { variantName: 'GA1' }, { variantName: 'GA2' }]);\n\n    this.set('transfer', {\n      sender: {\n        firstName: 'Spencer'\n      },\n      status: 'CANCELLED'\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"IRBw2xmf\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-accept-completed-tickets\\\"],null,[[\\\"tickets\\\",\\\"transfer\\\"],[[28,[\\\"tickets\\\"]],[28,[\\\"transfer\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_complete_ticket_row_variant_name')).eq(0).text().trim(), '2 x GA1');\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_complete_ticket_row_variant_name')).eq(1).text().trim(), '1 x GA2');\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_complete_ticket_row_sent_by')).eq(0).text().trim(), 'Sent by Spencer');\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_complete_ticket_row_status')).eq(0).text().trim(), 'Cancelled');\n\n    this.set('transfer.sender', {\n      email: 'spencer.price@ticketfly.com'\n    });\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_complete_ticket_row_sent_by')).eq(0).text().trim(), 'Sent by spencer.price@ticketfly.com');\n\n    this.set('transfer.status', 'DENIED');\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_complete_ticket_row_status')).eq(0).text().trim(), 'Declined');\n\n    this.set('transfer.status', 'COMPLETED');\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_complete_ticket_row_status')).eq(0).text().trim(), 'Accepted');\n  });\n\n  (0, _emberQunit.test)('it does not render a status with the PENDING state', function (assert) {\n    this.set('tickets', [{ variantName: 'GA1' }, { variantName: 'GA1' }, { variantName: 'GA2' }]);\n\n    this.set('transfer', {\n      sender: {\n        firstName: 'Spencer'\n      },\n      status: 'PENDING',\n      isPending: true\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"IRBw2xmf\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-accept-completed-tickets\\\"],null,[[\\\"tickets\\\",\\\"transfer\\\"],[[28,[\\\"tickets\\\"]],[28,[\\\"transfer\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_complete_ticket_row_variant_name')).eq(0).text().trim(), '2 x GA1');\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_complete_ticket_row_variant_name')).eq(1).text().trim(), '1 x GA2');\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_complete_ticket_row_sent_by')).eq(0).text().trim(), 'Sent by Spencer');\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_complete_ticket_row_status')).eq(0).text().trim(), '');\n  });\n});","define('dummy/tests/integration/components/tta-accept-header-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine'], function (_emberQunit, _testModuleForEngine) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-accept-header', 'Integration | Component | tta accept header', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it uses the correct attributes for acceptable transfer based on what is available', function (assert) {\n    this.set('transfer', {\n      isAcceptable: true,\n      sender: {\n        firstName: 'Spencer',\n        email: 'spencer.price@ticketfly.com'\n      }\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2/xo7+b2\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-accept-header\\\"],null,[[\\\"transfer\\\"],[[28,[\\\"transfer\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('h2').text().trim().replace(/\\n+/g, ' ').replace(/\\s+/g, ' '), 'Spencer sent you tickets. Would you like to accept?');\n\n    this.set('transfer', {\n      isAcceptable: true,\n      sender: {\n        firstName: undefined,\n        email: 'spencer.price@ticketfly.com'\n      }\n    });\n\n    assert.equal(this.$('h2').text().trim().replace(/\\n+/g, ' ').replace(/\\s+/g, ' '), 'spencer.price@ticketfly.com sent you tickets. Would you like to accept?');\n  });\n\n  (0, _emberQunit.test)('it shows the correct header message if transfer was already accepted', function (assert) {\n    this.set('transfer', {\n      isAcceptable: false,\n      isPending: false,\n      status: 'COMPLETED'\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2/xo7+b2\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-accept-header\\\"],null,[[\\\"transfer\\\"],[[28,[\\\"transfer\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('h2').text().trim(), 'You can no longer accept this transfer because it has already been accepted.');\n  });\n\n  (0, _emberQunit.test)('it shows the correct header message if transfer was not previously accepted', function (assert) {\n    this.set('transfer', {\n      isAcceptable: true,\n      isPending: true,\n      status: 'PENDING',\n      sender: {\n        firstName: undefined,\n        email: 'spencer.price@ticketfly.com'\n      }\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2/xo7+b2\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-accept-header\\\"],null,[[\\\"transfer\\\"],[[28,[\\\"transfer\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    this.set('transfer.status', 'COMPLETED');\n    this.set('transfer.isAcceptable', false);\n    this.set('transfer.isPending', false);\n\n    assert.equal(this.$('h2').text().trim().replace(/\\n+/g, ' ').replace(/\\s+/g, ' '), 'spencer.price@ticketfly.com sent you tickets.');\n  });\n\n  (0, _emberQunit.test)('it shows the cancelled message if transfer was cancelled', function (assert) {\n    this.set('transfer', {\n      isAcceptable: false,\n      isPending: false,\n      status: 'CANCELLED'\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2/xo7+b2\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-accept-header\\\"],null,[[\\\"transfer\\\"],[[28,[\\\"transfer\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('h2').text().trim(), 'Ticket transfer cancelled.');\n  });\n\n  (0, _emberQunit.test)('it shows the declined message if transfer was denied', function (assert) {\n    this.set('transfer', {\n      isAcceptable: false,\n      isPending: false,\n      status: 'DENIED'\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2/xo7+b2\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-accept-header\\\"],null,[[\\\"transfer\\\"],[[28,[\\\"transfer\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('h2').text().trim(), 'Ticket transfer declined.');\n  });\n\n  (0, _emberQunit.test)('it shows unacceptable message if transfer is not acceptable', function (assert) {\n    this.set('transfer', {\n      isAcceptable: false,\n      isPending: true,\n      acceptanceState: {\n        acceptable: false,\n        description: 'Not acceptable!'\n      }\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2/xo7+b2\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-accept-header\\\"],null,[[\\\"transfer\\\"],[[28,[\\\"transfer\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('h2').text().trim().replace(/[\\s\\n]+/g, ' '), 'You can no longer accept this transfer. Status: Not acceptable!');\n  });\n});","define('dummy/tests/integration/components/tta-accept-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook'], function (_emberQunit, _testModuleForEngine, _emberHook) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-accept', 'Integration | Component | tta accept', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      (0, _emberHook.initialize)();\n    }\n  });\n\n  (0, _emberQunit.test)('the tickets are rendered with numbers according to the variantName', function (assert) {\n    this.set('event', {});\n    this.set('tickets', [{ variantName: 'a' }, { variantName: 'a' }, { variantName: 'b' }]);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"GDagkzdt\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-accept\\\"],null,[[\\\"event\\\",\\\"tickets\\\"],[[28,[\\\"event\\\"]],[28,[\\\"tickets\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_ticket_row')).length, 3, 'there are three accepted tickets');\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_ticket_row_count_info')).eq(0).text().trim(), '1 of 2');\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_ticket_row_count_info')).eq(1).text().trim(), '2 of 2');\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_ticket_row_count_info')).eq(2).text().trim(), '1 of 1');\n  });\n});","define('dummy/tests/integration/components/tta-accept-ticket-row-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook'], function (_emberQunit, _testModuleForEngine, _emberHook) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-accept-ticket-row', 'Integration | Component | tta accept ticket row', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it displays the variant description', function (assert) {\n    assert.expect(1);\n\n    this.set('ticket', { variantName: 'foo' });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ZpnLWf4E\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-accept-ticket-row\\\"],null,[[\\\"ticket\\\"],[[28,[\\\"ticket\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_ticket_row_variant_description')).text().trim(), 'foo');\n  });\n\n  (0, _emberQunit.test)('it displays the index and ticketsLength', function (assert) {\n    assert.expect(1);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Vk7HNAHP\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-accept-ticket-row\\\"],null,[[\\\"index\\\",\\\"ticketsLength\\\"],[2,5]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_ticket_row_count_info')).text().trim(), '3 of 5');\n  });\n\n  (0, _emberQunit.test)('it seat info if present', function (assert) {\n    assert.expect(1);\n\n    this.set('ticket', { properties: { section: 'C', seat: '12' } });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"JW6+L6Qo\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-accept-ticket-row\\\"],null,[[\\\"index\\\",\\\"ticketsLength\\\",\\\"ticket\\\"],[2,5,[28,[\\\"ticket\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_accept_ticket_row_count_info')).text().trim(), 'Section C · Seat 12');\n  });\n});","define('dummy/tests/integration/components/tta-block-body-scroll-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember'], function (_emberQunit, _testModuleForEngine, _ember) {\n  'use strict';\n\n  var $ = _ember.default.$;\n\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-block-body-scroll', 'Integration | Component | tta block body scroll', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.set('isVisible', true);\n    this.render(_ember.default.HTMLBars.template({\n      \"id\": \"3SVY6CNh\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"if\\\"],[[28,[\\\"isVisible\\\"]]],null,{\\\"statements\\\":[[0,\\\"      \\\"],[1,[26,[\\\"tta-block-body-scroll\\\"]],false],[0,\\\"\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal($('body').css('overflow'), 'hidden');\n\n    this.set('isVisible', false);\n\n    assert.equal($('body').css('overflow'), 'visible');\n  });\n});","define('dummy/tests/integration/components/tta-confirmation-modal-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook'], function (_emberQunit, _testModuleForEngine, _emberHook) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-confirmation-modal', 'Integration | Component | tta confirmation modal', {\n    integration: true,\n    beforeEach: function beforeEach() {\n      (0, _emberHook.initialize)();\n    }\n  });\n\n  (0, _emberQunit.test)('yields content', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"QcBUnshR\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-confirmation-modal\\\"],null,null,{\\\"statements\\\":[[0,\\\"      Stuff.\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_confirmation_modal')).text().trim(), 'Stuff.', 'text is rendered');\n  });\n});","define('dummy/tests/integration/components/tta-event-info-test', ['ember', 'moment', 'ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook', 'dummy/tests/helpers/responsive'], function (_ember, _moment, _emberQunit, _testModuleForEngine, _emberHook, _responsive) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-event-info', 'Integration | Component | tta event info', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      (0, _emberHook.initialize)();\n    }\n  });\n\n  (0, _emberQunit.test)('`tta-event-info` renders the event img in order of priority', function (assert) {\n    (0, _responsive.setBreakpointForIntegrationTest)(this, 'greaterThanMobile');\n    assert.expect(4);\n\n    this.set('event', {\n      imageUrls: {\n        poster: '/foo/poster.png',\n        card: '/foo/card.png',\n        banner: '/foo/banner.png'\n      }\n    });\n\n    this.render(_ember.default.HTMLBars.template({\n      \"id\": \"ugQH59ma\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-event-info\\\"],null,[[\\\"event\\\",\\\"media\\\"],[[28,[\\\"event\\\"]],[28,[\\\"media\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_event_table_img')).length, 1, 'there is an image rendered');\n    assert.equal(this.$((0, _emberHook.hook)('tta_event_table_img')).attr('src'), '/foo/poster.png', 'correct src');\n\n    this.set('event.imageUrls.poster', '');\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_event_table_img')).attr('src'), '/foo/card.png', 'correct src');\n\n    this.set('event.imageUrls.card', '');\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_event_table_img')).attr('src'), '/foo/banner.png', 'correct src');\n  });\n\n  (0, _emberQunit.test)('`tta-event-info` does not render the image if on mobile', function (assert) {\n    (0, _responsive.setBreakpointForIntegrationTest)(this, 'mobile');\n    assert.expect(1);\n\n    this.set('event', {\n      imageUrls: {\n        poster: '/foo/poster.png',\n        card: '/foo/card.png',\n        banner: '/foo/banner.png'\n      }\n    });\n\n    this.render(_ember.default.HTMLBars.template({\n      \"id\": \"ugQH59ma\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-event-info\\\"],null,[[\\\"event\\\",\\\"media\\\"],[[28,[\\\"event\\\"]],[28,[\\\"media\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_event_table_img')).length, 0, 'there is no image rendered');\n  });\n\n  (0, _emberQunit.test)('`tta-event-info` renders the event name', function (assert) {\n    assert.expect(2);\n\n    this.set('event', _ember.default.Object.create({\n      name: 'Beruit'\n    }));\n\n    this.render(_ember.default.HTMLBars.template({\n      \"id\": \"8XAT5rnF\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-event-info\\\"],null,[[\\\"event\\\"],[[28,[\\\"event\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    var tableName = this.$((0, _emberHook.hook)('tta_event_table_name'));\n    assert.equal(tableName.text().trim(), 'Beruit', 'correct text');\n    assert.ok(tableName.hasClass('text-large-6-1'), 'larger text if no `topLineInfo`');\n  });\n\n  (0, _emberQunit.test)('`tta-event-info` renders the top line info', function (assert) {\n    assert.expect(2);\n\n    this.set('event', _ember.default.Object.create({\n      name: 'Beruit',\n      topLineInfo: 'Hamilton presents'\n    }));\n\n    this.render(_ember.default.HTMLBars.template({\n      \"id\": \"8XAT5rnF\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-event-info\\\"],null,[[\\\"event\\\"],[[28,[\\\"event\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    var topLine = this.$((0, _emberHook.hook)('tta_event_table_top_line'));\n    var tableName = this.$((0, _emberHook.hook)('tta_event_table_name'));\n    assert.equal(topLine.text().trim(), 'Hamilton presents', 'correct text');\n    assert.ok(tableName.hasClass('text-large-2'), 'smaller text if `topLineInfo`');\n  });\n\n  (0, _emberQunit.test)('`tta-event-info` renders the event date', function (assert) {\n    assert.expect(1);\n\n    this.set('event', _ember.default.Object.create({\n      startTime: (0, _moment.default)('2000-01-05 21:50:00')\n    }));\n\n    this.render(_ember.default.HTMLBars.template({\n      \"id\": \"8XAT5rnF\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-event-info\\\"],null,[[\\\"event\\\"],[[28,[\\\"event\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_event_table_date')).text().trim(), 'Wednesday, January 5, 2000', 'correct text');\n  });\n\n  (0, _emberQunit.test)('`tta-event-info` renders the event door and start times', function (assert) {\n    assert.expect(3);\n\n    this.set('event', _ember.default.Object.create({\n      doorTime: (0, _moment.default)('2000-01-05 21:50:00'),\n      startTime: (0, _moment.default)('2000-01-05 22:50:00')\n    }));\n\n    this.render(_ember.default.HTMLBars.template({\n      \"id\": \"8XAT5rnF\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-event-info\\\"],null,[[\\\"event\\\"],[[28,[\\\"event\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_event_table_times')).text().replace(/[\\n\\s]+/g, ' ').trim(), 'Doors 9:50 PM | Show 10:50 PM', 'correct text');\n\n    this.set('event', _ember.default.Object.create({\n      doorTime: null,\n      startTime: (0, _moment.default)('2000-01-05 22:50:00')\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_event_table_times')).text().replace(/[\\n\\s]+/g, ' ').trim(), 'Show 10:50 PM', 'correct text');\n\n    this.set('event', _ember.default.Object.create({\n      doorTime: (0, _moment.default)('2000-01-05 22:50:00'),\n      startTime: null\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_event_table_times')).text().replace(/[\\n\\s]+/g, ' ').trim(), 'Doors 10:50 PM', 'correct text');\n  });\n\n  (0, _emberQunit.test)('`tta-event-info` renders the event location', function (assert) {\n    assert.expect(1);\n\n    this.set('event', _ember.default.Object.create({\n      venue: {\n        name: 'Bar',\n        address: {\n          city: 'Foo',\n          stateCode: 'BZ'\n        }\n      }\n    }));\n\n    this.render(_ember.default.HTMLBars.template({\n      \"id\": \"8XAT5rnF\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-event-info\\\"],null,[[\\\"event\\\"],[[28,[\\\"event\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_event_table_location')).text().trim(), 'Bar, Foo, BZ', 'correct text');\n  });\n});","define('dummy/tests/integration/components/tta-grouped-tickets-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook'], function (_emberQunit, _testModuleForEngine, _emberHook) {\n  'use strict';\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-grouped-tickets', 'Integration | Component | tta grouped tickets', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      (0, _emberHook.initialize)();\n    }\n  });\n\n  (0, _emberQunit.test)('it groups tickets', function (assert) {\n    var _this = this;\n\n    this.set('tickets', [{ variantName: 'Test A', code: '12345' }, { variantName: 'Test B', code: '23456' }, { variantName: 'Test C', code: '34567' }, { variantName: 'Test A', code: '45678' }, { variantName: 'Test B', code: '56789' }]);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"UfKLFBRm\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-grouped-tickets\\\"],null,[[\\\"tickets\\\"],[[28,[\\\"tickets\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    var groups = this.$((0, _emberHook.hook)('tta_grouped_tickets_grouping'));\n\n    assert.equal(groups.length, 3, 'there are three groups');\n    assert.equal(groups.eq(0).text().trim(), '2 x Test A');\n    assert.equal(groups.eq(1).text().trim(), '2 x Test B');\n    assert.equal(groups.eq(2).text().trim(), '1 x Test C');\n\n    [['Test A', 0, '*2345'], ['Test A', 1, '*5678'], ['Test B', 0, '*3456'], ['Test B', 1, '*6789'], ['Test C', 0, '*4567']].forEach(function (_ref2, eachIndex) {\n      var _ref3 = _slicedToArray(_ref2, 3),\n          variantName = _ref3[0],\n          index = _ref3[1],\n          code = _ref3[2];\n\n      var element = _this.$((0, _emberHook.hook)('tta_grouped_tickets_ticket', { variantName: variantName, index: index }));\n      assert.equal(element.text().trim(), 'Barcode: ' + code, 'Ticket #' + eachIndex + ' displays correct code');\n    });\n  });\n});","define('dummy/tests/integration/components/tta-if-resolved-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-runloop'], function (_emberQunit, _testModuleForEngine, _emberRunloop) {\n  'use strict';\n\n  var RSVP = Ember.RSVP;\n  var Promise = RSVP.Promise;\n\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-if-resolved', 'Integration | Component | tta if resolved', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it yields inverse until promises resolve', function (assert) {\n    var _this = this;\n\n    var done = assert.async();\n\n    var resolvePromise = void 0;\n    this.set('promise', new Promise(function (resolve) {\n      resolvePromise = resolve;\n    }));\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"RsSbBejd\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-if-resolved\\\"],[[28,[\\\"promise\\\"]]],null,{\\\"statements\\\":[[0,\\\"      \\\"],[11,\\\"div\\\",[]],[15,\\\"class\\\",\\\"loaded\\\"],[13],[1,[28,[\\\"val\\\",\\\"name\\\"]],false],[14],[0,\\\"\\\\n\\\"]],\\\"locals\\\":[\\\"val\\\"]},{\\\"statements\\\":[[0,\\\"      \\\"],[11,\\\"div\\\",[]],[15,\\\"class\\\",\\\"loading\\\"],[13],[0,\\\"Loading\\\"],[14],[0,\\\"\\\\n\\\"]],\\\"locals\\\":[]}],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('.loading').text().trim(), 'Loading');\n\n    resolvePromise({ name: 'Loaded' });\n\n    dblNext(function () {\n      assert.equal(_this.$('.loaded').eq(0).text().trim(), 'Loaded');\n      done();\n    });\n  });\n\n  // This allows concurrency & animations to complete.\n  function dblNext(cb) {\n    return (0, _emberRunloop.next)(function () {\n      (0, _emberRunloop.next)(cb);\n    });\n  }\n});","define('dummy/tests/integration/components/tta-modal-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-keyboard', 'sinon'], function (_emberQunit, _testModuleForEngine, _emberKeyboard, _sinon) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-modal', 'Integration | Component | tta modal', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      (0, _emberKeyboard.initialize)();\n    }\n  });\n\n  (0, _emberQunit.test)('it triggers action on escape key', function () {\n    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee(assert) {\n      var callback;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              callback = _sinon.default.stub();\n\n\n              this.on('action', callback);\n\n              this.render(Ember.HTMLBars.template({\n                \"id\": \"CylcT8eZ\",\n                \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-modal\\\"],null,[[\\\"on-close\\\"],[[33,[\\\"action\\\"],[[28,[null]],\\\"action\\\"],null]]],{\\\"statements\\\":[[0,\\\"      template block text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n                \"meta\": {}\n              }));\n\n              _context.next = 5;\n              return (0, _emberKeyboard.triggerKeyPress)('Escape');\n\n            case 5:\n\n              assert.equal(callback.callCount, 1, 'the `on-close` action was called');\n\n            case 6:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/integration/components/tta-personal-message-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook', 'sinon'], function (_emberQunit, _testModuleForEngine, _emberHook, _sinon) {\n  'use strict';\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-personal-message', 'Integration | Component | tta personal message', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      (0, _emberHook.initialize)();\n    }\n  });\n\n  (0, _emberQunit.test)('it can add a personal message', function (assert) {\n    var _this = this;\n\n    this.set('message', '');\n\n    this.on('updateMessage', function (message) {\n      _this.set('message', message);\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ENd6NHiX\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-personal-message\\\"],null,[[\\\"action\\\"],[[33,[\\\"action\\\"],[[28,[null]],\\\"updateMessage\\\"],null]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    this.$((0, _emberHook.hook)('tta_personal_message_add')).click();\n\n    this.$((0, _emberHook.hook)('tta_personal_message_input')).val('Test 1234').trigger('keyup');\n\n    assert.equal(this.get('message'), 'Test 1234', 'the message was updated');\n\n    this.$((0, _emberHook.hook)('tta_personal_message_clear')).click();\n\n    assert.equal(this.get('message'), '', 'the message was cleared');\n  });\n\n  (0, _emberQunit.test)('the personal message can be edited', function (assert) {\n    var _this2 = this;\n\n    this.set('message', '');\n\n    this.on('updateMessage', function (message) {\n      _this2.set('message', message);\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ENd6NHiX\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-personal-message\\\"],null,[[\\\"action\\\"],[[33,[\\\"action\\\"],[[28,[null]],\\\"updateMessage\\\"],null]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    this.$((0, _emberHook.hook)('tta_personal_message_add')).click();\n\n    this.$((0, _emberHook.hook)('tta_personal_message_input')).val('Hello????').trigger('keyup');\n\n    assert.equal(this.get('message'), 'Hello????', 'the message was updated');\n\n    this.$((0, _emberHook.hook)('tta_personal_message_input')).val('Howdy!').trigger('keyup');\n\n    assert.equal(this.get('message'), 'Howdy!', 'the message was updated');\n  });\n\n  (0, _emberQunit.test)('the personal message is constrained to 1,000 characters', function (assert) {\n    var str = makeStringOfLength(2000);\n    var stub = _sinon.default.stub();\n\n    this.on('updateMessage', stub);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ENd6NHiX\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-personal-message\\\"],null,[[\\\"action\\\"],[[33,[\\\"action\\\"],[[28,[null]],\\\"updateMessage\\\"],null]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    this.$((0, _emberHook.hook)('tta_personal_message_add')).click();\n\n    assert.equal(this.$('textarea').attr('maxlength'), '1000', 'the textarea has a max length attribute');\n\n    this.$((0, _emberHook.hook)('tta_personal_message_input')).val(str).trigger('keyup');\n\n    var _stub$getCall = stub.getCall(1),\n        _stub$getCall$args = _slicedToArray(_stub$getCall.args, 1),\n        calledString = _stub$getCall$args[0];\n\n    assert.equal(calledString.length, 1000, 'string was capped at 1000 characters');\n  });\n\n  function makeStringOfLength(length) {\n    return Array(length).join('a');\n  }\n});","define('dummy/tests/integration/components/tta-same-user-modal-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook', 'sinon'], function (_emberQunit, _testModuleForEngine, _emberHook, _sinon) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-modal', 'Integration | Component | tta same user modal', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      (0, _emberHook.initialize)();\n    }\n  });\n\n  (0, _emberQunit.test)('the email address is rendered', function (assert) {\n    this.register('service:session', {}, { instantiate: false });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"eZGbcpRX\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-same-user-modal\\\"],null,[[\\\"email\\\"],[\\\"spencer.price@ticketfly.com\\\"]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('same_user_modal_email')).text().trim(), 'spencer.price@ticketfly.com');\n  });\n\n  (0, _emberQunit.test)('the switch accounts button calls the invalidate session method', function (assert) {\n    var invalidate = _sinon.default.stub();\n\n    this.register('service:session', { invalidate: invalidate }, { instantiate: false });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"OqYXb+Ac\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"tta-same-user-modal\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    var button = this.$((0, _emberHook.hook)('same_user_modal_switch_accounts'));\n\n    button.click();\n\n    assert.ok(button.attr('disabled'), 'the button is disabled');\n    assert.equal(invalidate.callCount, 1);\n  });\n});","define('dummy/tests/integration/components/tta-selected-list-test', ['sinon', 'ember-qunit', 'dummy/tests/helpers/test-module-for-engine'], function (_sinon, _emberQunit, _testModuleForEngine) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-selected-list', 'Integration | Component | tta selected list', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('`tta-selected-list` yields a list of selected and not selected items', function (assert) {\n    var stub = _sinon.default.stub();\n    this.on('selectionChanged', stub);\n\n    this.set('list', [{ id: '1' }, { id: '2' }, { id: '3' }, { id: '4' }]);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"fz/CqkHH\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-selected-list\\\"],null,[[\\\"list\\\",\\\"selection-changed\\\"],[[28,[\\\"list\\\"]],[33,[\\\"action\\\"],[[28,[null]],\\\"selectionChanged\\\"],null]]],{\\\"statements\\\":[[6,[\\\"each\\\"],[[28,[\\\"ctx\\\",\\\"selected\\\"]]],null,{\\\"statements\\\":[[11,\\\"span\\\",[]],[15,\\\"class\\\",\\\"selected\\\"],[5,[\\\"action\\\"],[[28,[null]],[28,[\\\"ctx\\\",\\\"toggle\\\"]],[28,[\\\"sel\\\"]]]],[13],[1,[28,[\\\"sel\\\",\\\"id\\\"]],false],[14]],\\\"locals\\\":[\\\"sel\\\"]},null],[6,[\\\"each\\\"],[[28,[\\\"ctx\\\",\\\"not-selected\\\"]]],null,{\\\"statements\\\":[[11,\\\"span\\\",[]],[15,\\\"class\\\",\\\"not-selected\\\"],[5,[\\\"action\\\"],[[28,[null]],[28,[\\\"ctx\\\",\\\"toggle\\\"]],[28,[\\\"sel\\\"]]]],[13],[1,[28,[\\\"sel\\\",\\\"id\\\"]],false],[14]],\\\"locals\\\":[\\\"sel\\\"]},null]],\\\"locals\\\":[\\\"ctx\\\"]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('.not-selected').text().trim(), '1234');\n    assert.equal(this.$('.selected').text().trim(), '');\n\n    this.$('.not-selected:eq(0)').click();\n\n    assert.deepEqual(stub.getCall(0).args[0], [{ id: '1' }], 'the action was triggered correctly');\n\n    this.$('.not-selected:eq(0)').click();\n\n    assert.deepEqual(stub.getCall(1).args[0], [{ id: '1' }, { id: '2' }], 'the action was triggered correctly');\n\n    assert.equal(this.$('.not-selected').text().trim(), '34');\n    assert.equal(this.$('.selected').text().trim(), '12');\n\n    this.$('.selected:eq(0)').click();\n\n    assert.deepEqual(stub.getCall(2).args[0], [{ id: '2' }], 'the action was triggered correctly');\n\n    assert.equal(this.$('.not-selected').text().trim(), '134');\n    assert.equal(this.$('.selected').text().trim(), '2');\n  });\n\n  (0, _emberQunit.test)('`tta-selected-list` yields a list of all items, with a helper for determining toggle', function (assert) {\n    var stub = _sinon.default.stub();\n    var list = [{ id: '1' }, { id: '2' }, { id: '3' }, { id: '4' }];\n\n    this.on('selectionChanged', stub);\n\n    this.set('list', list);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"vZFLwd/g\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-selected-list\\\"],null,[[\\\"list\\\",\\\"selection-changed\\\"],[[28,[\\\"list\\\"]],[33,[\\\"action\\\"],[[28,[null]],\\\"selectionChanged\\\"],null]]],{\\\"statements\\\":[[6,[\\\"each\\\"],[[28,[\\\"ctx\\\",\\\"all-items\\\"]]],null,{\\\"statements\\\":[[11,\\\"span\\\",[]],[16,\\\"class\\\",[33,[\\\"if\\\"],[[33,[\\\"contains\\\"],[[28,[\\\"sel\\\"]],[28,[\\\"ctx\\\",\\\"selected\\\"]]],null],\\\"selected\\\",\\\"not-selected\\\"],null],null],[5,[\\\"action\\\"],[[28,[null]],[28,[\\\"ctx\\\",\\\"toggle\\\"]],[28,[\\\"sel\\\"]]]],[13],[1,[28,[\\\"sel\\\",\\\"id\\\"]],false],[14]],\\\"locals\\\":[\\\"sel\\\"]},null]],\\\"locals\\\":[\\\"ctx\\\"]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('.not-selected').text().trim(), '1234');\n    assert.equal(this.$('.selected').text().trim(), '');\n\n    this.$('.not-selected:eq(0)').click();\n\n    assert.deepEqual(stub.getCall(0).args[0], [list[0]], 'the action was triggered correctly');\n    assert.equal(this.$('.not-selected').text().trim(), '234');\n\n    this.$('.not-selected:eq(0)').click();\n\n    assert.deepEqual(stub.getCall(1).args[0], [list[0], list[1]], 'the action was triggered correctly');\n\n    assert.equal(this.$('.not-selected').text().trim(), '34');\n    assert.equal(this.$('.selected').text().trim(), '12');\n\n    this.$('.selected:eq(0)').click();\n\n    assert.deepEqual(stub.getCall(2).args[0], [list[1]], 'the action was triggered correctly');\n\n    assert.equal(this.$('.not-selected').text().trim(), '134');\n    assert.equal(this.$('.selected').text().trim(), '2');\n  });\n\n  (0, _emberQunit.test)('`tta-selected-list` resets when a new list is provided', function (assert) {\n    this.set('list', [{ id: '1' }, { id: '2' }, { id: '3' }, { id: '4' }]);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"oDa04f1C\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-selected-list\\\"],null,[[\\\"list\\\"],[[28,[\\\"list\\\"]]]],{\\\"statements\\\":[[6,[\\\"each\\\"],[[28,[\\\"ctx\\\",\\\"selected\\\"]]],null,{\\\"statements\\\":[[11,\\\"span\\\",[]],[15,\\\"class\\\",\\\"selected\\\"],[5,[\\\"action\\\"],[[28,[null]],[28,[\\\"ctx\\\",\\\"toggle\\\"]],[28,[\\\"sel\\\"]]]],[13],[1,[28,[\\\"sel\\\",\\\"id\\\"]],false],[14]],\\\"locals\\\":[\\\"sel\\\"]},null],[6,[\\\"each\\\"],[[28,[\\\"ctx\\\",\\\"not-selected\\\"]]],null,{\\\"statements\\\":[[11,\\\"span\\\",[]],[15,\\\"class\\\",\\\"not-selected\\\"],[5,[\\\"action\\\"],[[28,[null]],[28,[\\\"ctx\\\",\\\"toggle\\\"]],[28,[\\\"sel\\\"]]]],[13],[1,[28,[\\\"sel\\\",\\\"id\\\"]],false],[14]],\\\"locals\\\":[\\\"sel\\\"]},null]],\\\"locals\\\":[\\\"ctx\\\"]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('.not-selected').text().trim(), '1234');\n\n    this.$('.not-selected:eq(0)').click();\n\n    assert.equal(this.$('.not-selected').text().trim(), '234');\n\n    this.set('list', [{ id: '1' }, { id: '2' }, { id: '3' }, { id: '4' }, { id: '5' }]);\n\n    assert.equal(this.$('.not-selected').text().trim(), '12345');\n  });\n\n  (0, _emberQunit.test)('`tta-selected-list` accepts a list of already-selected items', function (assert) {\n    var item1 = { id: '1' };\n    var item2 = { id: '2' };\n\n    this.set('selected', [item1]);\n    this.set('list', [item1, item2, { id: '3' }, { id: '4' }]);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"a+va/au7\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-selected-list\\\"],null,[[\\\"selected\\\",\\\"list\\\"],[[28,[\\\"selected\\\"]],[28,[\\\"list\\\"]]]],{\\\"statements\\\":[[6,[\\\"each\\\"],[[28,[\\\"ctx\\\",\\\"selected\\\"]]],null,{\\\"statements\\\":[[11,\\\"span\\\",[]],[15,\\\"class\\\",\\\"selected\\\"],[5,[\\\"action\\\"],[[28,[null]],[28,[\\\"ctx\\\",\\\"toggle\\\"]],[28,[\\\"sel\\\"]]]],[13],[1,[28,[\\\"sel\\\",\\\"id\\\"]],false],[14]],\\\"locals\\\":[\\\"sel\\\"]},null],[6,[\\\"each\\\"],[[28,[\\\"ctx\\\",\\\"not-selected\\\"]]],null,{\\\"statements\\\":[[11,\\\"span\\\",[]],[15,\\\"class\\\",\\\"not-selected\\\"],[5,[\\\"action\\\"],[[28,[null]],[28,[\\\"ctx\\\",\\\"toggle\\\"]],[28,[\\\"sel\\\"]]]],[13],[1,[28,[\\\"sel\\\",\\\"id\\\"]],false],[14]],\\\"locals\\\":[\\\"sel\\\"]},null]],\\\"locals\\\":[\\\"ctx\\\"]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('.not-selected').text().trim(), '234');\n    assert.equal(this.$('.selected').text().trim(), '1');\n\n    this.set('selected', [item2]);\n\n    assert.equal(this.$('.not-selected').text().trim(), '134');\n    assert.equal(this.$('.selected').text().trim(), '2');\n  });\n\n  (0, _emberQunit.test)('`tta-selected-list` does not render any elements', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"+ilyfhr0\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"tta-selected-list\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n    assert.equal(this.$('*').length, 0);\n  });\n\n  (0, _emberQunit.test)('`tta-selected-list` does not allow mutations on action result to affect component', function (assert) {\n    this.set('list', [{ id: '1' }]);\n    this.on('selectionChanged', function (list) {\n      return list.clear();\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"jYnKuD1h\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-selected-list\\\"],null,[[\\\"list\\\",\\\"selection-changed\\\"],[[28,[\\\"list\\\"]],[33,[\\\"action\\\"],[[28,[null]],\\\"selectionChanged\\\"],null]]],{\\\"statements\\\":[[6,[\\\"each\\\"],[[28,[\\\"ctx\\\",\\\"not-selected\\\"]]],null,{\\\"statements\\\":[[11,\\\"span\\\",[]],[15,\\\"class\\\",\\\"item\\\"],[5,[\\\"action\\\"],[[28,[null]],[28,[\\\"ctx\\\",\\\"toggle\\\"]],[28,[\\\"sel\\\"]]]],[13],[1,[28,[\\\"sel\\\",\\\"id\\\"]],false],[14]],\\\"locals\\\":[\\\"sel\\\"]},null]],\\\"locals\\\":[\\\"ctx\\\"]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('.item').text().trim(), '1');\n\n    this.$('.item').eq(0).click();\n\n    assert.equal(this.$('.item').text().trim(), '');\n  });\n});","define('dummy/tests/integration/components/tta-show-hide-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook'], function (_emberQunit, _testModuleForEngine, _emberHook) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-show-hide', 'Integration | Component | tta show hide', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders closed by default', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"vW+mf2zt\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-show-hide\\\"],null,null,{\\\"statements\\\":[[0,\\\"      \\\"],[11,\\\"button\\\",[]],[5,[\\\"action\\\"],[[28,[null]],[28,[\\\"ctx\\\",\\\"toggle\\\"]]]],[13],[0,\\\"Toggle!\\\"],[14],[0,\\\"\\\\n\\\"],[6,[\\\"component\\\"],[[28,[\\\"ctx\\\",\\\"content\\\"]]],null,{\\\"statements\\\":[[0,\\\"        \\\"],[11,\\\"span\\\",[]],[15,\\\"class\\\",\\\"content\\\"],[13],[0,\\\"Visible!\\\"],[14],[0,\\\"\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"\\\\n\\\"],[6,[\\\"if\\\"],[[28,[\\\"ctx\\\",\\\"toggled\\\"]]],null,{\\\"statements\\\":[[0,\\\"        \\\"],[11,\\\"span\\\",[]],[15,\\\"class\\\",\\\"if-toggled\\\"],[13],[0,\\\"Toggled!\\\"],[14],[0,\\\"\\\\n\\\"]],\\\"locals\\\":[]},null]],\\\"locals\\\":[\\\"ctx\\\"]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('.content').length, 0, 'the content is hidden');\n    assert.equal(this.$('.if-toggled').length, 0, 'the content is hidden');\n\n    this.$('button').click();\n\n    assert.equal(this.$('.content').length, 1, 'the content is visible');\n    assert.equal(this.$('.if-toggled').length, 1, 'the content is visible');\n\n    this.$('button').click();\n\n    assert.equal(this.$('.content').length, 0, 'the content is hidden');\n    assert.equal(this.$('.if-toggled').length, 0, 'the content is hidden');\n  });\n\n  (0, _emberQunit.test)('the `button` and `content` components have the right aria settings', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"TgbhRGh8\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-show-hide\\\"],null,null,{\\\"statements\\\":[[6,[\\\"component\\\"],[[28,[\\\"ctx\\\",\\\"button\\\"]]],null,{\\\"statements\\\":[[0,\\\"        Button\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"\\\\n\\\"],[6,[\\\"component\\\"],[[28,[\\\"ctx\\\",\\\"content\\\"]]],[[\\\"class\\\"],[\\\"content\\\"]],{\\\"statements\\\":[[0,\\\"        Content\\\\n\\\"]],\\\"locals\\\":[]},null]],\\\"locals\\\":[\\\"ctx\\\"]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    var controlsId = this.$((0, _emberHook.hook)('tta_show_hide_button')).attr('aria-controls');\n\n    assert.ok(controlsId, 'the expand button has an aria controls attribute set');\n    assert.ok(this.$('#' + controlsId).hasClass('content'), 'the id is of the content');\n  });\n});","define('dummy/tests/integration/components/tta-show-hide/expand-button-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'sinon'], function (_emberQunit, _testModuleForEngine, _sinon) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-show-hide/expand-button', 'Integration | Component | tta show hide/expand button', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('necessary aria roles are added to button element', function (assert) {\n    this.set('toggled', false);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"hl8WZVwS\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-show-hide/expand-button\\\"],null,[[\\\"toggled\\\",\\\"aria-controls\\\"],[[28,[\\\"toggled\\\"]],\\\"test-id\\\"]],{\\\"statements\\\":[[0,\\\"      Text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('button').text().trim(), 'Text', 'button content is yielded');\n\n    assert.equal(this.$('button').attr('aria-controls'), 'test-id', 'button has `aria-controls` attribute');\n    assert.equal(this.$('button').attr('aria-expanded'), 'false', 'button has `aria-expanded` attribute');\n\n    this.set('toggled', true);\n\n    assert.equal(this.$('button').attr('aria-expanded'), 'true', '`aria-expanded` attribute updates based on state');\n  });\n\n  (0, _emberQunit.test)('icon class changes based on `toggled` state', function (assert) {\n    this.set('toggled', false);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"ufafG5SS\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-show-hide/expand-button\\\"],null,[[\\\"toggled\\\"],[[28,[\\\"toggled\\\"]]]],{\\\"statements\\\":[[0,\\\"      Text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('.tf-direct-right').length, 1, 'icon pointing right is visible');\n\n    this.set('toggled', true);\n\n    assert.equal(this.$('.tf-direct-down').length, 1, 'icon pointing down is visible');\n  });\n\n  (0, _emberQunit.test)('click actions work by clicking on the button element', function (assert) {\n    var stub = _sinon.default.stub();\n\n    this.on('toggle', stub);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"qz4EvyTy\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-show-hide/expand-button\\\"],null,[[\\\"toggle\\\"],[[33,[\\\"action\\\"],[[28,[null]],\\\"toggle\\\"],null]]],{\\\"statements\\\":[[0,\\\"      Text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    this.$('button').click();\n\n    assert.equal(stub.callCount, 1, 'action triggered');\n  });\n\n  (0, _emberQunit.test)('click actions work by clicking on the containing element', function (assert) {\n    var stub = _sinon.default.stub();\n\n    this.on('toggle', stub);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"bewhXvS5\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-show-hide/expand-button\\\"],null,[[\\\"class\\\",\\\"toggle\\\"],[\\\"click-me\\\",[33,[\\\"action\\\"],[[28,[null]],\\\"toggle\\\"],null]]],{\\\"statements\\\":[[0,\\\"      Text\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    this.$('.click-me').click();\n\n    assert.equal(stub.callCount, 1, 'action triggered');\n  });\n});","define('dummy/tests/integration/components/tta-show-hide/visible-content-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine'], function (_emberQunit, _testModuleForEngine) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-show-hide/visible-content', 'Integration | Component | tta show hide/visible content', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it shows or hides content based on visible attribute', function (assert) {\n    this.set('visible', false);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"R5Ub881C\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-show-hide/visible-content\\\"],null,[[\\\"visible\\\"],[[28,[\\\"visible\\\"]]]],{\\\"statements\\\":[[0,\\\"      Visible\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$().text().trim(), '');\n\n    this.set('visible', true);\n\n    assert.equal(this.$().text().trim(), 'Visible');\n  });\n});","define('dummy/tests/integration/components/tta-ticket-row-test', ['ember-metal/get', 'ember-metal/set', 'ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook', 'dummy/tests/helpers/responsive'], function (_get, _set, _emberQunit, _testModuleForEngine, _emberHook, _responsive) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-ticket-row', 'Integration | Component | tta ticket row', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      (0, _emberHook.initialize)();\n    }\n  });\n\n  (0, _emberQunit.test)('`tta-ticket-row` has class pointer when transferable', function (assert) {\n    assert.expect(1);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"0cWYAwZY\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-row\\\"],null,[[\\\"transferable\\\"],[true]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.ok((0, _emberHook.$hook)('tta_ticket_row').hasClass('pointer'), 'has class');\n  });\n\n  (0, _emberQunit.test)('`tta-ticket-row` does not have class pointer when not transferable', function (assert) {\n    assert.expect(1);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"BUr6mAt9\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-row\\\"],null,[[\\\"transferable\\\"],[false]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.ok(!(0, _emberHook.$hook)('tta_ticket_row').hasClass('pointer'), 'does not have class');\n  });\n\n  (0, _emberQunit.test)('`tta-ticket-row` does not have background-b5-10 class when the ticket is not selected', function (assert) {\n    assert.expect(1);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"JxtZDJRS\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-row\\\"],null,[[\\\"selected\\\"],[false]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.ok(!(0, _emberHook.$hook)('tta_ticket_row').hasClass('background-b5-10'));\n  });\n\n  (0, _emberQunit.test)('`tta-ticket-row` has background-b5-10 class when the ticket is selected', function (assert) {\n    assert.expect(1);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"qVs+py71\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-row\\\"],null,[[\\\"selected\\\"],[true]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.ok((0, _emberHook.$hook)('tta_ticket_row').hasClass('background-b5-10'));\n  });\n\n  (0, _emberQunit.test)('`tta-ticket-row` renders a checkbox if transferable', function (assert) {\n    assert.expect(1);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"0cWYAwZY\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-row\\\"],null,[[\\\"transferable\\\"],[true]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal((0, _emberHook.$hook)('tta_ticket_row_checkbox').length, 1, 'checkbox is rendered');\n  });\n\n  (0, _emberQunit.test)('`tta-ticket-row` does not render a checkbox if untransferable', function (assert) {\n    assert.expect(1);\n\n    this.set('ticket', { transfer: {} });\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"WVh7yFUq\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-row\\\"],null,[[\\\"ticket\\\"],[[28,[\\\"ticket\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal((0, _emberHook.$hook)('tta_ticket_row_checkbox').length, 0, 'checkbox not rendered');\n  });\n\n  (0, _emberQunit.test)('`tta-ticket-row` displays the correct status in desktop view', function (assert) {\n    var _this = this;\n\n    (0, _responsive.setBreakpointForIntegrationTest)(this, 'greaterThanMobile');\n    var testCases = [{\n      expectedResponse: '',\n      transferState: {\n        transferable: true\n      },\n      transfer: null\n    }, {\n      expectedResponse: 'Awaiting acceptance fromaaron.burr@notprez.com',\n      transferState: {\n        transferable: false\n      },\n      transfer: {\n        isPending: true,\n        recipient: {\n          email: 'aaron.burr@notprez.com'\n        }\n      }\n    }, {\n      expectedResponse: 'Transferred toaaron.burr@notprez.com',\n      transferState: {\n        transferable: false\n      },\n      transfer: {\n        isPending: false,\n        recipient: {\n          email: 'aaron.burr@notprez.com'\n        }\n      }\n    }, {\n      expectedResponse: 'Transfer feature disabled',\n      transferState: {\n        transferable: false\n      }\n    }, {\n      expectedResponse: 'Scanned',\n      transferState: {\n        transferable: false,\n        description: 'Scanned'\n      },\n      transfer: {\n        isCancelled: true\n      }\n    }];\n\n    assert.expect(testCases.length);\n\n    // In desktop view, the transfer column is a sibiling to the description\n    var selector = (0, _emberHook.hook)('tta_ticket_row_description_column') + ' + ' + (0, _emberHook.hook)('tta_ticket_row_transfer_column') + ' > ' + (0, _emberHook.hook)('tta_ticket_row_transfer_status');\n\n    testCases.forEach(function (ticket) {\n      _this.set('ticket', ticket);\n\n      _this.render(Ember.HTMLBars.template({\n        \"id\": \"Fduhcxo/\",\n        \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-row\\\"],null,[[\\\"ticket\\\",\\\"media\\\"],[[28,[\\\"ticket\\\"]],[28,[\\\"media\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(_this.$(selector).text().trim(), (0, _get.default)(ticket, 'expectedResponse'), 'transferable status is correct');\n    });\n  });\n\n  (0, _emberQunit.test)('`tta-ticket-row` displays the correct status in mobile view', function (assert) {\n    var _this2 = this;\n\n    (0, _responsive.setBreakpointForIntegrationTest)(this, 'mobile');\n    var testCases = [{\n      expectedResponse: '',\n      transferState: {\n        transferable: true\n      },\n      transfer: null\n    }, {\n      expectedResponse: 'Awaiting acceptance fromaaron.burr@notprez.com',\n      transferState: {\n        transferable: false\n      },\n      transfer: {\n        isPending: true,\n        recipient: {\n          email: 'aaron.burr@notprez.com'\n        }\n      }\n    }, {\n      expectedResponse: 'Transferred toaaron.burr@notprez.com',\n      transferState: {\n        transferable: false\n      },\n      transfer: {\n        isPending: false,\n        recipient: {\n          email: 'aaron.burr@notprez.com'\n        }\n      }\n    }, {\n      expectedResponse: 'Transfer feature disabled',\n      transferState: {\n        transferable: false\n      }\n    }];\n\n    assert.expect(testCases.length);\n\n    // In desktop view, the transfer column is a descendant to the description\n    var selector = (0, _emberHook.hook)('tta_ticket_row_description_column') + ' > ' + (0, _emberHook.hook)('tta_ticket_row_transfer_column') + ' > ' + (0, _emberHook.hook)('tta_ticket_row_transfer_status');\n\n    testCases.forEach(function (ticket) {\n      _this2.set('ticket', ticket);\n\n      _this2.render(Ember.HTMLBars.template({\n        \"id\": \"Fduhcxo/\",\n        \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-row\\\"],null,[[\\\"ticket\\\",\\\"media\\\"],[[28,[\\\"ticket\\\"]],[28,[\\\"media\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n        \"meta\": {}\n      }));\n      assert.equal(_this2.$(selector).text().trim(), (0, _get.default)(ticket, 'expectedResponse'), 'transferable status is correct');\n    });\n  });\n\n  (0, _emberQunit.test)('`tta-ticket-row` triggers `toggleSelect` if it is transferable', function (assert) {\n    assert.expect(1);\n\n    var ticket = {\n      transfer: null,\n      transferState: {\n        transferable: true\n      }\n    };\n\n    (0, _set.setProperties)(this, {\n      ticket: ticket,\n      actions: {\n        toggleSelect: function toggleSelect() {\n          assert.ok(true, 'is clickable');\n        }\n      }\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"C1OZwjLM\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-row\\\"],null,[[\\\"ticket\\\",\\\"toggleSelect\\\"],[[28,[\\\"ticket\\\"]],[33,[\\\"action\\\"],[[28,[null]],\\\"toggleSelect\\\"],null]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    (0, _emberHook.$hook)('tta_ticket_row').click();\n  });\n\n  (0, _emberQunit.test)('`tta-ticket-row` does not trigger `toggleSelect` if it is not transferable', function (assert) {\n    assert.expect(0);\n\n    var ticket = {\n      transfer: {}\n    };\n\n    (0, _set.setProperties)(this, {\n      ticket: ticket,\n      actions: {\n        toggleSelect: function toggleSelect() {\n          assert.ok(false, 'is clickable');\n        }\n      }\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"C1OZwjLM\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-row\\\"],null,[[\\\"ticket\\\",\\\"toggleSelect\\\"],[[28,[\\\"ticket\\\"]],[33,[\\\"action\\\"],[[28,[null]],\\\"toggleSelect\\\"],null]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    (0, _emberHook.$hook)('tta_ticket_row').click();\n  });\n\n  (0, _emberQunit.test)('the ticket `variantName` is displayed', function (assert) {\n    assert.expect(1);\n\n    (0, _set.default)(this, 'ticket', { variantName: 'foo' });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"WVh7yFUq\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-row\\\"],null,[[\\\"ticket\\\"],[[28,[\\\"ticket\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal((0, _emberHook.$hook)('tta_ticket_row_variant_description').text().trim(), 'foo', 'text is correct');\n  });\n\n  (0, _emberQunit.test)('the ticket `sectionDetails` is displayed', function (assert) {\n    assert.expect(1);\n\n    (0, _set.default)(this, 'ticket', { properties: { section: 'foo', row: 'bar', seat: 'baz' }, variantName: 'Reserved' });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"WVh7yFUq\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-row\\\"],null,[[\\\"ticket\\\"],[[28,[\\\"ticket\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal((0, _emberHook.$hook)('tta_ticket_row_section_details').text().trim(), 'Section foo · Row bar · Seat baz', 'correct text');\n  });\n\n  (0, _emberQunit.test)('the ticket `sectionDetails` is displayed, even if only some info is provided', function (assert) {\n    assert.expect(1);\n\n    (0, _set.default)(this, 'ticket', { properties: { section: 'foo' }, variantName: 'General Admission' });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"WVh7yFUq\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-row\\\"],null,[[\\\"ticket\\\"],[[28,[\\\"ticket\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal((0, _emberHook.$hook)('tta_ticket_row_section_details').text().trim(), 'Section foo', 'correct text');\n  });\n\n  (0, _emberQunit.test)('the ticket `sectionDetails` is not displayed if there are is no section, row, or seat', function (assert) {\n    assert.expect(1);\n\n    (0, _set.default)(this, 'ticket', { variantName: 'General Admission' });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"WVh7yFUq\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-row\\\"],null,[[\\\"ticket\\\"],[[28,[\\\"ticket\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal((0, _emberHook.$hook)('tta_ticket_row_section_details').length, 0, 'sectionDetails not rendered');\n  });\n\n  (0, _emberQunit.test)('the last 4 digits of the ticket `code` is displayed', function (assert) {\n    assert.expect(1);\n\n    (0, _set.default)(this, 'ticket', { code: '1234567890' });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"WVh7yFUq\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-row\\\"],null,[[\\\"ticket\\\"],[[28,[\\\"ticket\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal((0, _emberHook.$hook)('tta_ticket_row_code').text().trim(), 'Barcode: ******7890', 'text is correct');\n  });\n\n  (0, _emberQunit.test)('the ticket row is faded out if the ticket is transfered', function (assert) {\n    (0, _responsive.setBreakpointForIntegrationTest)(this, 'greaterThanMobile');\n    assert.expect(4);\n\n    this.set('ticket', {\n      transferState: { transferable: false },\n      transfer: { isTransferred: true }\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"Fduhcxo/\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-row\\\"],null,[[\\\"ticket\\\",\\\"media\\\"],[[28,[\\\"ticket\\\"]],[28,[\\\"media\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.ok((0, _emberHook.$hook)('tta_ticket_row_description_column').hasClass('opacity-05'));\n    assert.ok((0, _emberHook.$hook)('tta_ticket_row_transfer_column').hasClass('opacity-05'));\n\n    this.set('ticket', {\n      transferState: { transferable: false },\n      transfer: { isTransferred: false }\n    });\n\n    assert.ok(!(0, _emberHook.$hook)('tta_ticket_row_description_column').hasClass('opacity-05'));\n    assert.ok(!(0, _emberHook.$hook)('tta_ticket_row_transfer_column').hasClass('opacity-05'));\n  });\n\n  (0, _emberQunit.test)('the ticket `code` is not displayed when it doesn\\'t exist in the ticket', function (assert) {\n    assert.expect(1);\n\n    (0, _set.default)(this, 'ticket', { code: null });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"WVh7yFUq\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-row\\\"],null,[[\\\"ticket\\\"],[[28,[\\\"ticket\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal((0, _emberHook.$hook)('tta_ticket_row_code').length, 0, 'no code is displayed');\n  });\n});","define('dummy/tests/integration/components/tta-ticket-status-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook'], function (_emberQunit, _testModuleForEngine, _emberHook) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-ticket-status', 'Integration | Component | tta ticket status', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      (0, _emberHook.initialize)();\n    }\n  });\n\n  (0, _emberQunit.test)('it renders shows status', function (assert) {\n    this.set('ticket', {\n      transferState: {\n        description: 'Pending'\n      }\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"xE5Eiipg\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-status\\\"],null,[[\\\"ticket\\\"],[[28,[\\\"ticket\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal((0, _emberHook.$hook)('tta_ticket_row_transfer_status').text().trim(), 'Pending', 'the text is rendered');\n  });\n\n  (0, _emberQunit.test)('it optionally renders the cancel link if canceleable', function (assert) {\n    this.set('ticket', {\n      transfer: {\n        isCancelable: false\n      }\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"xE5Eiipg\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-ticket-status\\\"],null,[[\\\"ticket\\\"],[[28,[\\\"ticket\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal((0, _emberHook.$hook)('tta_ticket_row_cancel').length, 0, 'cancel is not visible');\n\n    this.set('ticket', {\n      transfer: {\n        isCancelable: true\n      }\n    });\n\n    assert.equal((0, _emberHook.$hook)('tta_ticket_row_cancel').length, 1, 'cancel is visible');\n  });\n});","define('dummy/tests/integration/components/tta-toasts-test', ['ember-owner/get', 'ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook'], function (_get, _emberQunit, _testModuleForEngine, _emberHook) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-toasts', 'Integration | Component | tta toasts', {\n    integration: true,\n    beforeEach: function beforeEach() {\n      (0, _emberHook.initialize)();\n      var typesUsed = ['danger'];\n      this.flashMessages = (0, _get.default)(this).lookup('service:flash-messages');\n      this.flashMessages.registerTypes(typesUsed);\n    }\n  });\n\n  (0, _emberQunit.test)('it renders', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"lRZ1BqT4\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"tta-toasts\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_toast')).length, 0, 'there are no toasts yet');\n  });\n});","define('dummy/tests/integration/components/tta-topbar-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook', 'sinon'], function (_emberQunit, _testModuleForEngine, _emberHook, _sinon) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-topbar', 'Integration | Component | tta topbar', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      (0, _emberHook.initialize)();\n    }\n  });\n\n  (0, _emberQunit.test)('it yields title and action components', function (assert) {\n    var action = _sinon.default.stub();\n    this.on('action', action);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"2CXCty4c\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-topbar\\\"],null,null,{\\\"statements\\\":[[0,\\\"      \\\"],[6,[\\\"component\\\"],[[28,[\\\"bar\\\",\\\"title\\\"]]],null,{\\\"statements\\\":[[0,\\\"foo\\\"]],\\\"locals\\\":[]},null],[0,\\\"\\\\n\\\"],[6,[\\\"component\\\"],[[28,[\\\"bar\\\",\\\"action\\\"]]],[[\\\"action\\\"],[[33,[\\\"action\\\"],[[28,[null]],\\\"action\\\"],null]]],{\\\"statements\\\":[[0,\\\"        bar\\\\n\\\"]],\\\"locals\\\":[]},null]],\\\"locals\\\":[\\\"bar\\\"]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    var $actionElement = this.$((0, _emberHook.hook)('tta_top_bar_action'));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_title')).text().trim(), 'foo', 'yields content into top bar title');\n    assert.equal($actionElement.text().trim(), 'bar', 'yields content into action component');\n\n    $actionElement.click();\n\n    assert.equal(action.callCount, 1, 'the action was triggered once');\n  });\n\n  (0, _emberQunit.test)('it yields title and action components, inline style', function (assert) {\n    var action = _sinon.default.stub();\n    this.on('action', action);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"tk3ifiv1\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-topbar\\\"],null,null,{\\\"statements\\\":[[0,\\\"      \\\"],[1,[33,[\\\"component\\\"],[[28,[\\\"bar\\\",\\\"title\\\"]],\\\"foo\\\"],null],false],[0,\\\"\\\\n      \\\"],[1,[33,[\\\"component\\\"],[[28,[\\\"bar\\\",\\\"action\\\"]],\\\"bar\\\"],[[\\\"action\\\"],[[33,[\\\"action\\\"],[[28,[null]],\\\"action\\\"],null]]]],false],[0,\\\"\\\\n\\\"]],\\\"locals\\\":[\\\"bar\\\"]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    var $actionElement = this.$((0, _emberHook.hook)('tta_top_bar_action'));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_title')).text().trim(), 'foo', 'yields content into top bar title');\n    assert.equal($actionElement.text().trim(), 'bar', 'yields content into action component');\n\n    $actionElement.click();\n\n    assert.equal(action.callCount, 1, 'the action was triggered once');\n  });\n});","define('dummy/tests/integration/components/tta-topbar/bar-action-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook', 'sinon'], function (_emberQunit, _testModuleForEngine, _emberHook, _sinon) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-topbar/bar-action', 'Integration | Component | tta topbar/bar action', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      (0, _emberHook.initialize)();\n    }\n  });\n\n  (0, _emberQunit.test)('it properly triggers the provided action', function (assert) {\n    var action = _sinon.default.stub();\n    this.on('action', action);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"iDuEor5m\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-topbar/bar-action\\\"],null,[[\\\"action\\\"],[[33,[\\\"action\\\"],[[28,[null]],\\\"action\\\"],null]]],{\\\"statements\\\":[[0,\\\"      Return to Other Thing\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    var $element = this.$((0, _emberHook.hook)('tta_top_bar_action'));\n\n    assert.equal($element.text().trim(), 'Return to Other Thing', 'the text is rendered');\n\n    $element.click();\n\n    assert.equal(action.callCount, 1, 'the action was triggered once');\n\n    $element.find('a').click();\n\n    assert.equal(action.callCount, 2, 'the action was triggered a second time');\n  });\n\n  (0, _emberQunit.test)('it properly triggers the provided action, inline version', function (assert) {\n    var action = _sinon.default.stub();\n    this.on('action', action);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"p3G1TTkX\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n    \\\"],[1,[33,[\\\"tta-topbar/bar-action\\\"],[\\\"Return to Other Thing\\\"],[[\\\"action\\\"],[[33,[\\\"action\\\"],[[28,[null]],\\\"action\\\"],null]]]],false],[0,\\\"\\\\n  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    var $element = this.$((0, _emberHook.hook)('tta_top_bar_action'));\n\n    assert.equal($element.text().trim(), 'Return to Other Thing');\n\n    $element.click();\n\n    assert.equal(action.callCount, 1, 'the action was triggered once');\n\n    $element.find('a').click();\n\n    assert.equal(action.callCount, 2, 'the action was triggered a second time');\n  });\n});","define('dummy/tests/integration/components/tta-topbar/bar-title-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook'], function (_emberQunit, _testModuleForEngine, _emberHook) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-topbar/bar-title', 'Integration | Component | tta topbar/bar title', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      (0, _emberHook.initialize)();\n    }\n  });\n\n  (0, _emberQunit.test)('it yields the title', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"/7QOjfyX\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n\\\"],[6,[\\\"tta-topbar/bar-title\\\"],null,null,{\\\"statements\\\":[[0,\\\"      Title\\\\n\\\"]],\\\"locals\\\":[]},null],[0,\\\"  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_title')).text().trim(), 'Title');\n  });\n\n  (0, _emberQunit.test)('it also supports an inline version', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"4QbWMNI6\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n    \\\"],[1,[33,[\\\"tta-topbar/bar-title\\\"],[\\\"Title\\\"],null],false],[0,\\\"\\\\n  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_title')).text().trim(), 'Title');\n  });\n});","define('dummy/tests/integration/components/tta-transfer-error-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook'], function (_emberQunit, _testModuleForEngine, _emberHook) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-transfer-error', 'Integration | Component | tta transfer error', {\n    integration: true\n  });\n\n  (0, _emberQunit.test)('it renders the icon and text', function (assert) {\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"cDOzTkVX\",\n      \"block\": \"{\\\"statements\\\":[[1,[26,[\\\"tta-transfer-error\\\"]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.ok(this.$((0, _emberHook.hook)('tta_transfer_error_icon')).length, 'there is an icon');\n    assert.equal(this.$((0, _emberHook.hook)('tta_transfer_error_text')).text().trim(), 'No transferable tickets found.');\n  });\n});","define('dummy/tests/integration/components/tta-transfer-test', ['ember-array/utils', 'ember-runloop', 'ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook', 'sinon'], function (_utils, _emberRunloop, _emberQunit, _testModuleForEngine, _emberHook, _sinon) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var RSVP = Ember.RSVP;\n  var Promise = RSVP.Promise;\n\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-transfer', 'Integration | Component | tta transfer', {\n    integration: true,\n\n    beforeEach: function beforeEach() {\n      (0, _emberHook.initialize)();\n    }\n  });\n\n  var tickets = (0, _utils.A)([{\n    transferState: {\n      transferable: true\n    }\n  }, {\n    transferState: {\n      transferable: true\n    }\n  }]);\n\n  (0, _emberQunit.test)('the transfer button is only enabled if at least one ticket is selected, and a valid email is provided', function (assert) {\n    assert.expect(6);\n\n    this.set('tickets', tickets);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"39XMRLPW\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-transfer\\\"],null,[[\\\"tickets\\\"],[[28,[\\\"tickets\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.ok(this.$((0, _emberHook.hook)('tta_transfer_button')).attr('disabled'), 'disabled when no terms, no tickets, no email');\n\n    assert.ok(this.$((0, _emberHook.hook)('tta_transfer_button')).attr('disabled'), 'disabled when no tickets, no email');\n    this.$((0, _emberHook.hook)('tta_ticket_row')).first().click();\n\n    assert.ok(this.$((0, _emberHook.hook)('tta_transfer_button')).attr('disabled'), 'disabled when no email');\n    this.$((0, _emberHook.hook)('tta_validating_input')).val('foo').trigger('change');\n\n    assert.ok(this.$((0, _emberHook.hook)('tta_transfer_button')).attr('disabled'), 'disabled when invalid email');\n    this.$((0, _emberHook.hook)('tta_validating_input')).val('foo@bar.baz').trigger('change');\n\n    assert.ok(!this.$((0, _emberHook.hook)('tta_transfer_button')).attr('disabled'), 'enabled when terms, tickets, and valid email');\n    this.$((0, _emberHook.hook)('tta_ticket_row')).first().click();\n\n    assert.ok(this.$((0, _emberHook.hook)('tta_transfer_button')).attr('disabled'), 'disabled when no tickets');\n  });\n\n  (0, _emberQunit.test)('a warning is provided if the tries to send tickets to themself', function () {\n    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee(assert) {\n      var input;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              this.set('tickets', tickets);\n              this.set('user', {\n                email: 'foo@bar.baz'\n              });\n\n              this.render(Ember.HTMLBars.template({\n                \"id\": \"E7M0aGCN\",\n                \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-transfer\\\"],null,[[\\\"tickets\\\",\\\"user\\\"],[[28,[\\\"tickets\\\"]],[28,[\\\"user\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n                \"meta\": {}\n              }));\n\n              this.$((0, _emberHook.hook)('tta_ticket_row')).first().click();\n\n              input = this.$((0, _emberHook.hook)('tta_validating_input'));\n\n\n              input.val('foo@bar.baz').trigger('change').trigger('blur');\n\n              assert.ok(this.$((0, _emberHook.hook)('tta_transfer_button')).attr('disabled'), 'transfer still disabled');\n              assert.equal(this.$((0, _emberHook.hook)('tta_validating_input_error')).length, 1, 'there is a validation error');\n\n              input.val('foo2@bar.baz').trigger('change');\n\n              assert.ok(!this.$((0, _emberHook.hook)('tta_transfer_button')).attr('disabled'), 'transfer re-enabled after different email');\n\n            case 10:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)('click the transfer button triggers the `submit-transfer` action', function (assert) {\n    assert.expect(1);\n\n    var stub = _sinon.default.stub();\n\n    this.on('transfer', stub);\n    this.set('tickets', tickets);\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DpYWLQB4\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-transfer\\\"],null,[[\\\"tickets\\\",\\\"submit-transfer\\\"],[[28,[\\\"tickets\\\"]],[33,[\\\"action\\\"],[[28,[null]],\\\"transfer\\\"],null]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    this.$((0, _emberHook.hook)('tta_transfer_terms')).find('input').click();\n    this.$((0, _emberHook.hook)('tta_ticket_row')).first().click();\n    this.$((0, _emberHook.hook)('tta_validating_input')).val('foo@bar.baz').trigger('change');\n\n    this.$((0, _emberHook.hook)('tta_transfer_button')).click();\n\n    assert.equal(stub.callCount, 1, 'the action was called');\n  });\n\n  (0, _emberQunit.test)('it is promise aware and shows loading states', function (assert) {\n    var _this = this;\n\n    var resolveTickets = void 0,\n        resolveEvent = void 0;\n    var done = assert.async();\n\n    this.set('model', {\n      tickets: new Promise(function (resolve) {\n        return resolveTickets = resolve;\n      }),\n      event: new Promise(function (resolve) {\n        return resolveEvent = resolve;\n      })\n    });\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"DCiQmZpa\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-transfer\\\"],null,[[\\\"tickets\\\",\\\"event\\\"],[[28,[\\\"model\\\",\\\"tickets\\\"]],[28,[\\\"model\\\",\\\"event\\\"]]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.ok(this.$((0, _emberHook.hook)('tta_event_table', { isLoading: true })).length, 'the loading state is visible');\n\n    resolveTickets(tickets);\n    resolveEvent({});\n\n    // Next Tick lets the concurrency task resolve\n    (0, _emberRunloop.next)(function () {\n      // And lets the animation complete.\n      (0, _emberRunloop.next)(function () {\n        assert.ok(_this.$((0, _emberHook.hook)('tta_event_table', { isLoading: false })).length, 'the loading state is gone');\n        done();\n      });\n    });\n  });\n});","define('dummy/tests/integration/components/tta-validating-input-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-hook', 'ember-keyboard', 'sinon'], function (_emberQunit, _testModuleForEngine, _emberHook, _emberKeyboard, _sinon) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleForComponent)('tta-validating-input', 'Integration | Component | tta validating input', {\n    integration: true,\n    beforeEach: function beforeEach() {\n      (0, _emberHook.initialize)();\n      (0, _emberKeyboard.initialize)();\n    }\n  });\n\n  (0, _emberQunit.test)('the on-update action works', function (assert) {\n    assert.expect(3);\n\n    this.set('action', _sinon.default.stub());\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"uwSpceMh\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-validating-input\\\"],null,[[\\\"on-update\\\"],[[33,[\\\"action\\\"],[[28,[null]],[28,[\\\"action\\\"]]],null]]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$('input[type=text]').length, 1);\n\n    this.$((0, _emberHook.hook)('tta_validating_input')).val('Alexander');\n    this.$((0, _emberHook.hook)('tta_validating_input')).trigger('keyup');\n\n    assert.equal(this.get('action').callCount, 1, 'action on triggered once');\n    assert.ok(this.get('action').getCall(0).calledWithExactly('Alexander'));\n  });\n\n  (0, _emberQunit.test)('it shows validation error only after each field is entered', function (assert) {\n    this.set('isValid', false);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"eKCW9K/W\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-validating-input\\\"],null,[[\\\"isValid\\\",\\\"error-message\\\"],[[28,[\\\"isValid\\\"]],\\\"Error!\\\"]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_validating_input', { invalid: true })).length, 0, 'name not marked invalid');\n    assert.equal(this.$((0, _emberHook.hook)('tta_validating_input_error')).text().trim(), '', 'error message not visible');\n\n    this.$((0, _emberHook.hook)('tta_validating_input')).trigger('blur');\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_validating_input', { invalid: true })).length, 1, 'name marked invalid');\n    assert.equal(this.$((0, _emberHook.hook)('tta_validating_input_error')).text().trim(), 'Error!', 'error message visible');\n\n    this.set('isValid', true);\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_validating_input', { invalid: true })).length, 0, 'name not marked invalid');\n  });\n\n  (0, _emberQunit.test)('immediately shows validation error if provided', function (assert) {\n    this.set('isValid', false);\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"IpbvI1eR\",\n      \"block\": \"{\\\"statements\\\":[[1,[33,[\\\"tta-validating-input\\\"],null,[[\\\"isValid\\\",\\\"error-message\\\",\\\"validateImmediately\\\"],[[28,[\\\"isValid\\\"]],\\\"Error!\\\",true]]],false]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_validating_input', { invalid: true })).length, 1, 'name marked invalid');\n    assert.equal(this.$((0, _emberHook.hook)('tta_validating_input_error')).text().trim(), 'Error!', 'error message visible');\n\n    this.set('isValid', true);\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_validating_input', { invalid: true })).length, 0, 'name not marked invalid');\n  });\n\n  (0, _emberQunit.test)('the `insert-newline` action is forwarded', function (assert) {\n    this.set('isValid', false);\n    this.set('action', _sinon.default.stub());\n\n    this.render(Ember.HTMLBars.template({\n      \"id\": \"FGSzqpj1\",\n      \"block\": \"{\\\"statements\\\":[[0,\\\"\\\\n    \\\"],[1,[33,[\\\"tta-validating-input\\\"],null,[[\\\"insert-newline\\\",\\\"isValid\\\",\\\"error-message\\\"],[[33,[\\\"action\\\"],[[28,[null]],[28,[\\\"action\\\"]]],null],[28,[\\\"isValid\\\"]],\\\"Error!\\\"]]],false],[0,\\\"\\\\n  \\\"]],\\\"locals\\\":[],\\\"named\\\":[],\\\"yields\\\":[],\\\"hasPartials\\\":false}\",\n      \"meta\": {}\n    }));\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_validating_input', { invalid: true })).length, 0, 'name not marked invalid');\n    assert.equal(this.$((0, _emberHook.hook)('tta_validating_input_error')).text().trim(), '', 'error message not visible');\n\n    var input = (0, _emberHook.hook)('tta_validating_input');\n    (0, _emberKeyboard.triggerKeyUp)('Enter', input);\n\n    assert.equal(this.$((0, _emberHook.hook)('tta_validating_input', { invalid: true })).length, 1, 'name marked invalid');\n    assert.equal(this.$((0, _emberHook.hook)('tta_validating_input_error')).text().trim(), 'Error!', 'error message visible');\n    assert.equal(this.get('action').callCount, 1, 'insert-newline action called');\n  });\n});","define('dummy/tests/integration/models/marketing-membership-test', ['ember-metal/get', 'ember-metal/set', 'dummy/tests/helpers/module-for-integration', 'dummy/tests/helpers/setup-mirage-for-integration', 'ember-runloop'], function (_get, _set, _moduleForIntegration, _setupMirageForIntegration, _emberRunloop) {\n  'use strict';\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _moduleForIntegration.moduleForIntegration)('Integration | Model | marketing membership', {\n    beforeEach: function beforeEach() {\n      this.store = this.container.lookup('service:store');\n\n      this.register('service:session', {\n        authorize: function authorize(authorizer, block) {\n          block('Authorization', 'Bearer 1234-3456-5678');\n        }\n      }, { instantiate: false });\n\n      (0, _setupMirageForIntegration.default)(this.container);\n    },\n    afterEach: function afterEach() {\n      server.shutdown();\n    }\n  });\n\n  (0, _moduleForIntegration.test)('can fetch and save a membership', function () {\n    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(assert) {\n      var mirageMembership, membershipArray, membership;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              mirageMembership = server.create('marketing-membership', {\n                emailSubscription: false\n              });\n              _context.next = 3;\n              return this.store.query('marketing-membership', {\n                userId: mirageMembership.userId,\n                orgId: mirageMembership.orgId\n              });\n\n            case 3:\n              membershipArray = _context.sent;\n              membership = (0, _get.default)(membershipArray, 'firstObject');\n\n\n              assert.deepEqual((0, _get.default)(membership, 'id'), mirageMembership.id);\n\n              _context.next = 8;\n              return (0, _emberRunloop.default)(function () {\n                (0, _set.default)(membership, 'emailSubscription', true);\n                return membership.save();\n              });\n\n            case 8:\n\n              assert.ok(server.db.marketingMemberships.find(mirageMembership.id).emailSubscription, 'membership was saved');\n\n            case 9:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _moduleForIntegration.test)('can create and save a membership', function () {\n    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(assert) {\n      var _this = this;\n\n      var membership, _server$db$marketingM, _server$db$marketingM2, dbMembership;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return (0, _emberRunloop.default)(function () {\n                return _this.store.createRecord('marketing-membership', {\n                  orgId: '1234',\n                  userId: '1234',\n                  emailSubscription: false\n                }).save();\n              });\n\n            case 2:\n              membership = _context2.sent;\n              _server$db$marketingM = server.db.marketingMemberships.where({\n                orgId: '1234',\n                userId: '1234'\n              }), _server$db$marketingM2 = _slicedToArray(_server$db$marketingM, 1), dbMembership = _server$db$marketingM2[0];\n\n\n              assert.equal(dbMembership.orgId, (0, _get.default)(membership, 'orgId'));\n              assert.equal(dbMembership.emailSubscription, (0, _get.default)(membership, 'emailSubscription'));\n\n            case 6:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/integration/models/tickets-test', ['ember-runloop', 'ember-metal/get', 'dummy/mirage/scenarios/create-order', 'dummy/tests/helpers/module-for-integration', 'dummy/tests/helpers/setup-mirage-for-integration'], function (_emberRunloop, _get, _createOrder3, _moduleForIntegration, _setupMirageForIntegration) {\n  'use strict';\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _moduleForIntegration.moduleForIntegration)('Integration | Model | tickets', {\n    beforeEach: function beforeEach() {\n      this.store = this.container.lookup('service:store');\n\n      this.register('service:session', {\n        authorize: function authorize(authorizer, block) {\n          block('Authorization', 'Bearer 1234-3456-5678');\n        }\n      }, { instantiate: false });\n\n      (0, _setupMirageForIntegration.default)(this.container);\n    },\n    afterEach: function afterEach() {\n      server.shutdown();\n    }\n  });\n\n  (0, _moduleForIntegration.test)('can create a ticket-transfer', function () {\n    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(assert) {\n      var _createOrder, _createOrder$tickets, orderId, tickets, transfer, _transfer$hasMany$ids, _transfer$hasMany$ids2, ticketId, refreshedTickets;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _createOrder = (0, _createOrder3.default)(server), _createOrder$tickets = _slicedToArray(_createOrder.tickets, 1), orderId = _createOrder$tickets[0].orderId;\n              _context.next = 3;\n              return this.store.query('ticket', { orderId: orderId });\n\n            case 3:\n              tickets = _context.sent;\n              transfer = (0, _emberRunloop.default)(this.store, 'createRecord', 'ticket-transfer', { tickets: tickets });\n              _transfer$hasMany$ids = transfer.hasMany('tickets').ids(), _transfer$hasMany$ids2 = _slicedToArray(_transfer$hasMany$ids, 1), ticketId = _transfer$hasMany$ids2[0];\n\n              assert.ok(ticketId, 'the transfer has some tickets');\n              assert.ok(this.store.peekRecord('ticket', ticketId), 'the ticket has a transfer');\n\n              _context.next = 10;\n              return (0, _emberRunloop.default)(transfer, 'save');\n\n            case 10:\n\n              (0, _emberRunloop.default)(this.store, 'unloadAll');\n\n              _context.next = 13;\n              return this.store.query('ticket', { orderId: orderId });\n\n            case 13:\n              refreshedTickets = _context.sent;\n\n\n              assert.ok((0, _get.default)(refreshedTickets, 'firstObject').belongsTo('transfer').id(), 'ticket has a transfer still');\n\n            case 15:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _moduleForIntegration.test)('fetching tickets that already have transfers shows them', function () {\n    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(assert) {\n      var _createOrder2, _createOrder2$tickets, orderId, tickets, ticket;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _createOrder2 = (0, _createOrder3.default)(server, {\n                ticketTraits: ['hasTransfer']\n              }), _createOrder2$tickets = _slicedToArray(_createOrder2.tickets, 1), orderId = _createOrder2$tickets[0].orderId;\n              _context2.next = 3;\n              return this.store.query('ticket', { orderId: orderId });\n\n            case 3:\n              tickets = _context2.sent;\n              ticket = (0, _get.default)(tickets, 'firstObject');\n\n\n              assert.ok((0, _get.default)(ticket, 'transfer'), 'the ticket has a transfer');\n              assert.ok((0, _get.default)(ticket, 'transfer.recipient.email'), 'the ticket has a recipient');\n              assert.ok((0, _get.default)(ticket, 'transferState.description'), 'there is a description too');\n\n            case 8:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/integration/models/transfer-test', ['ember-runloop', 'ember-metal/get', 'ember-metal/set', 'dummy/mirage/scenarios/create-transfer', 'dummy/tests/helpers/module-for-integration', 'dummy/tests/helpers/setup-mirage-for-integration'], function (_emberRunloop, _get, _set, _createTransfer5, _moduleForIntegration, _setupMirageForIntegration) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _moduleForIntegration.moduleForIntegration)('Integration | Model | ticket-transfer', {\n    beforeEach: function beforeEach() {\n      this.store = this.container.lookup('service:store');\n      (0, _setupMirageForIntegration.default)(this.container);\n    },\n    afterEach: function afterEach() {\n      server.shutdown();\n    }\n  });\n\n  (0, _moduleForIntegration.test)('can accept all tickets for a transfer', function () {\n    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(assert) {\n      var _createTransfer, _createTransfer$trans, id, acceptanceToken, tickets, transfer;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _createTransfer = (0, _createTransfer5.default)(server), _createTransfer$trans = _createTransfer.transfer, id = _createTransfer$trans.id, acceptanceToken = _createTransfer$trans.acceptanceToken, tickets = _createTransfer.tickets;\n              _context.next = 3;\n              return (0, _emberRunloop.default)(this.store, 'queryRecord', 'ticket-transfer', { id: id, acceptanceToken: acceptanceToken });\n\n            case 3:\n              transfer = _context.sent;\n\n\n              assert.equal((0, _get.default)(transfer, 'id'), id);\n              assert.equal((0, _get.default)(transfer, 'tickets.length'), tickets.length, 'tickets were loaded into the store');\n\n              (0, _emberRunloop.default)(null, _set.default, transfer, 'status', 'ACCEPTED');\n\n              _context.next = 9;\n              return (0, _emberRunloop.default)(transfer, 'save');\n\n            case 9:\n              (0, _emberRunloop.default)(this.store, 'unloadAll');\n\n              _context.next = 12;\n              return (0, _emberRunloop.default)(this.store, 'queryRecord', 'ticket-transfer', { id: id, acceptanceToken: acceptanceToken });\n\n            case 12:\n              transfer = _context.sent;\n\n\n              assert.equal((0, _get.default)(transfer, 'id'), id);\n              assert.equal((0, _get.default)(transfer, 'status'), 'ACCEPTED', 'transfer state is updated');\n              assert.equal((0, _get.default)(transfer, 'tickets.length'), tickets.length, 'tickets were loaded into the store');\n\n            case 16:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _moduleForIntegration.test)('can accept some tickets for a transfer', function () {\n    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(assert) {\n      var _createTransfer2, _createTransfer2$tran, id, acceptanceToken, tickets, transfer, lastTicket;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _createTransfer2 = (0, _createTransfer5.default)(server), _createTransfer2$tran = _createTransfer2.transfer, id = _createTransfer2$tran.id, acceptanceToken = _createTransfer2$tran.acceptanceToken, tickets = _createTransfer2.tickets;\n              _context2.next = 3;\n              return (0, _emberRunloop.default)(this.store, 'queryRecord', 'ticket-transfer', { id: id, acceptanceToken: acceptanceToken });\n\n            case 3:\n              transfer = _context2.sent;\n\n\n              assert.equal((0, _get.default)(transfer, 'id'), id);\n              assert.equal((0, _get.default)(transfer, 'tickets.length'), tickets.length, 'tickets were loaded into the store');\n\n              lastTicket = (0, _get.default)(transfer, 'tickets.lastObject');\n\n              (0, _emberRunloop.default)((0, _get.default)(transfer, 'tickets'), 'removeObject', lastTicket);\n              (0, _emberRunloop.default)(null, _set.default, transfer, 'status', 'ACCEPTED');\n\n              _context2.next = 11;\n              return (0, _emberRunloop.default)(transfer, 'save');\n\n            case 11:\n              (0, _emberRunloop.default)(this.store, 'unloadAll');\n\n              _context2.next = 14;\n              return (0, _emberRunloop.default)(this.store, 'queryRecord', 'ticket-transfer', { id: id, acceptanceToken: acceptanceToken });\n\n            case 14:\n              transfer = _context2.sent;\n\n\n              assert.equal((0, _get.default)(transfer, 'id'), id);\n              assert.equal((0, _get.default)(transfer, 'status'), 'ACCEPTED', 'transfer state is updated');\n              assert.equal((0, _get.default)(transfer, 'tickets.length'), tickets.length - 1, 'tickets were loaded into the store');\n\n            case 18:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n\n  (0, _moduleForIntegration.test)('can accept no tickets for a transfer', function () {\n    var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(assert) {\n      var _createTransfer3, _createTransfer3$tran, id, acceptanceToken, tickets, transfer;\n\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              _createTransfer3 = (0, _createTransfer5.default)(server), _createTransfer3$tran = _createTransfer3.transfer, id = _createTransfer3$tran.id, acceptanceToken = _createTransfer3$tran.acceptanceToken, tickets = _createTransfer3.tickets;\n              _context3.next = 3;\n              return (0, _emberRunloop.default)(this.store, 'queryRecord', 'ticket-transfer', { id: id, acceptanceToken: acceptanceToken });\n\n            case 3:\n              transfer = _context3.sent;\n\n\n              assert.equal((0, _get.default)(transfer, 'id'), id);\n              assert.equal((0, _get.default)(transfer, 'tickets.length'), tickets.length, 'tickets were loaded into the store');\n\n              (0, _emberRunloop.default)(null, _set.default, transfer, 'tickets', []);\n              (0, _emberRunloop.default)(null, _set.default, transfer, 'status', 'REJECTED');\n\n              _context3.next = 10;\n              return (0, _emberRunloop.default)(transfer, 'save');\n\n            case 10:\n              (0, _emberRunloop.default)(this.store, 'unloadAll');\n\n              _context3.next = 13;\n              return (0, _emberRunloop.default)(this.store, 'queryRecord', 'ticket-transfer', { id: id, acceptanceToken: acceptanceToken });\n\n            case 13:\n              transfer = _context3.sent;\n\n\n              assert.equal((0, _get.default)(transfer, 'id'), id);\n              assert.equal((0, _get.default)(transfer, 'status'), 'REJECTED', 'transfer state is updated');\n              assert.equal((0, _get.default)(transfer, 'tickets.length'), 0, 'tickets were loaded into the store');\n\n            case 17:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n\n  (0, _moduleForIntegration.test)('the `acceptableStatus` is fetched', function () {\n    var _ref4 = _asyncToGenerator(regeneratorRuntime.mark(function _callee4(assert) {\n      var _createTransfer4, _createTransfer4$tran, id, acceptanceToken, transfer;\n\n      return regeneratorRuntime.wrap(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              _createTransfer4 = (0, _createTransfer5.default)(server, {\n                transferTraits: ['notAcceptableStatus']\n              }), _createTransfer4$tran = _createTransfer4.transfer, id = _createTransfer4$tran.id, acceptanceToken = _createTransfer4$tran.acceptanceToken;\n              _context4.next = 3;\n              return (0, _emberRunloop.default)(this.store, 'queryRecord', 'ticket-transfer', { id: id, acceptanceToken: acceptanceToken });\n\n            case 3:\n              transfer = _context4.sent;\n\n\n              assert.equal((0, _get.default)(transfer, 'id'), id);\n\n              assert.deepEqual((0, _get.default)(transfer, 'acceptanceState'), {\n                acceptable: false,\n                description: 'Invalid / Scanned'\n              });\n\n            case 6:\n            case 'end':\n              return _context4.stop();\n          }\n        }\n      }, _callee4, this);\n    }));\n\n    return function (_x4) {\n      return _ref4.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/integration/models/user-test', ['ember-metal/get', 'dummy/tests/helpers/module-for-integration', 'dummy/tests/helpers/setup-mirage-for-integration', 'ember-runloop'], function (_get, _moduleForIntegration, _setupMirageForIntegration, _emberRunloop) {\n  'use strict';\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  (0, _moduleForIntegration.moduleForIntegration)('Integration | Model | user', {\n    beforeEach: function beforeEach() {\n      this.store = this.container.lookup('service:store');\n\n      this.register('service:session', {\n        authorize: function authorize(authorizer, block) {\n          block('Authorization', 'Bearer 1234-3456-5678');\n        }\n      }, { instantiate: false });\n\n      (0, _setupMirageForIntegration.default)(this.container);\n    },\n    afterEach: function afterEach() {\n      server.shutdown();\n    }\n  });\n\n  (0, _moduleForIntegration.test)('can fetch the current user', function () {\n    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(assert) {\n      var mirageUser, user;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              mirageUser = server.create('user', {\n                _authToken: '1234-3456-5678'\n              });\n              _context.next = 3;\n              return this.store.queryRecord('user', { me: true });\n\n            case 3:\n              user = _context.sent;\n\n              assert.deepEqual((0, _get.default)(user, 'id'), mirageUser.id);\n\n            case 5:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _moduleForIntegration.test)('can save the user firstName lastName', function () {\n    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(assert) {\n      var _this = this;\n\n      var user, _server$db$users$wher, _server$db$users$wher2, dbUser;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              server.create('user', {\n                _authToken: '1234-3456-5678'\n              });\n\n              _context2.next = 3;\n              return (0, _emberRunloop.default)(function () {\n                return _this.store.queryRecord('user', { me: true });\n              });\n\n            case 3:\n              user = _context2.sent;\n              _context2.next = 6;\n              return (0, _emberRunloop.default)(function () {\n                user.set('firstName', 'Spencer');\n                user.set('lastName', 'Price');\n                return user.save();\n              });\n\n            case 6:\n              _server$db$users$wher = server.db.users.where({\n                firstName: 'Spencer',\n                lastName: 'Price'\n              }), _server$db$users$wher2 = _slicedToArray(_server$db$users$wher, 1), dbUser = _server$db$users$wher2[0];\n\n\n              assert.equal(dbUser.firstName, (0, _get.default)(user, 'firstName'));\n              assert.equal(dbUser.lastName, (0, _get.default)(user, 'lastName'));\n\n            case 9:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n});","define(\"dummy/tests/template-deprecations-test\", [], function () {\n  \"use strict\";\n});","define('dummy/tests/test-helper', ['dummy/tests/helpers/resolver', 'ember-qunit', 'ember-cli-qunit', 'dummy/tests/helpers/flash-message'], function (_resolver, _emberQunit, _emberCliQunit) {\n  'use strict';\n\n  (0, _emberQunit.setResolver)(_resolver.default);\n  (0, _emberCliQunit.start)();\n});","define('dummy/tests/tests.lint-test', [], function () {\n  'use strict';\n\n  QUnit.module('ESLint | tests');\n\n  QUnit.test('acceptance/accept-flow-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/accept-flow-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('acceptance/tta-flow-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'acceptance/tta-flow-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/destroy-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/destroy-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/flash-message.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/flash-message.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-acceptance.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-acceptance.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/module-for-integration.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/module-for-integration.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/resolver.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/resolver.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/responsive.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/responsive.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/setup-mirage-for-integration.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/setup-mirage-for-integration.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/start-app.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/start-app.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('helpers/test-module-for-engine.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'helpers/test-module-for-engine.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-accept-completed-tickets-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-accept-completed-tickets-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-accept-header-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-accept-header-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-accept-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-accept-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-accept-ticket-row-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-accept-ticket-row-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-block-body-scroll-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-block-body-scroll-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-confirmation-modal-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-confirmation-modal-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-event-info-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-event-info-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-grouped-tickets-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-grouped-tickets-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-if-resolved-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-if-resolved-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-modal-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-modal-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-personal-message-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-personal-message-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-same-user-modal-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-same-user-modal-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-selected-list-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-selected-list-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-show-hide-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-show-hide-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-show-hide/expand-button-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-show-hide/expand-button-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-show-hide/visible-content-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-show-hide/visible-content-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-ticket-row-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-ticket-row-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-ticket-status-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-ticket-status-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-toasts-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-toasts-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-topbar-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-topbar-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-topbar/bar-action-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-topbar/bar-action-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-topbar/bar-title-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-topbar/bar-title-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-transfer-error-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-transfer-error-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-transfer-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-transfer-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/components/tta-validating-input-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/components/tta-validating-input-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/models/marketing-membership-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/models/marketing-membership-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/models/tickets-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/models/tickets-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/models/transfer-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/models/transfer-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('integration/models/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'integration/models/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('test-helper.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'test-helper.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/marketing-membership-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/marketing-membership-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/ticket-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/ticket-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/ticket-transfer-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/ticket-transfer-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/adapters/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/adapters/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/accept/confirm-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/accept/confirm-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/new-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/new-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/new/modal/cancel-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/new/modal/cancel-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/controllers/new/modal/confirm-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/controllers/new/modal/confirm-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/array-copy-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/array-copy-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/barcode-obfuscator-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/barcode-obfuscator-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/line-breaker-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/line-breaker-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/tta-inc-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/tta-inc-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/tta-section-details-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/tta-section-details-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/helpers/tta-transfer-state-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/helpers/tta-transfer-state-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/mixins/new-transfer-state-model-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/mixins/new-transfer-state-model-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/event-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/event-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/marketing-membership-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/marketing-membership-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/ticket-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/ticket-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/ticket-transfer-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/ticket-transfer-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/models/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/models/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/accept-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/accept-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/accept/confirm-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/accept/confirm-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/accept/confirm/terms-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/accept/confirm/terms-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/accept/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/accept/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/accept/success-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/accept/success-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/new-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/new-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/new/modal-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/new/modal-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/new/modal/cancel-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/new/modal/cancel-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/new/modal/confirm-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/new/modal/confirm-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/new/modal/index-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/new/modal/index-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/new/modal/success-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/new/modal/success-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/routes/new/modal/terms-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/routes/new/modal/terms-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/application-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/application-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/event-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/event-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/marketing-membership-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/marketing-membership-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/ticket-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/ticket-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/ticket-transfer-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/ticket-transfer-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/serializers/user-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/serializers/user-test.js should pass ESLint\\n\\n');\n  });\n\n  QUnit.test('unit/services/transfers-test.js', function (assert) {\n    assert.expect(1);\n    assert.ok(true, 'unit/services/transfers-test.js should pass ESLint\\n\\n');\n  });\n});","define('dummy/tests/unit/adapters/application-test', ['ember-metal/get', 'ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'sinon'], function (_get, _emberQunit, _testModuleForEngine, _sinon) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('adapter:application', 'Unit | Adapter | application', {\n    needs: [],\n    beforeEach: function beforeEach() {\n      this.register('service:session', {}, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('it looks up auth token on the session service', function (assert) {\n    this.register('service:session', {\n      authorize: function authorize(authorizer, block) {\n        block('Authorization', 'Bearer 1234');\n      }\n    }, { instantiate: false });\n\n    var adapter = this.subject();\n    var setRequestHeader = _sinon.default.stub();\n    adapter.ajaxOptions().beforeSend({ setRequestHeader: setRequestHeader });\n\n    assert.ok(setRequestHeader.getCall(0).calledWithExactly('Authorization', 'Bearer 1234'));\n  });\n\n  (0, _emberQunit.test)('it uses the configuration for host and namespace', function (assert) {\n    var adapter = this.subject();\n\n    assert.equal((0, _get.default)(adapter, 'host'), 'localhost:9000');\n    assert.equal((0, _get.default)(adapter, 'namespace'), 'v2');\n  });\n});","define('dummy/tests/unit/adapters/marketing-membership-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine'], function (_emberQunit, _testModuleForEngine) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('adapter:marketing-membership', 'Unit | Adapter | marketing membership', {\n    needs: [],\n    beforeEach: function beforeEach() {\n      this.register('service:session', {}, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('urlForQuery', function (assert) {\n    var adapter = this.subject();\n    var url = adapter.urlForQuery({\n      userId: '1234'\n    });\n\n    assert.equal(url, 'localhost:9000/v2/users/1234/orgMemberships');\n  });\n\n  (0, _emberQunit.test)('urlForCreateRecord', function (assert) {\n    var adapter = this.subject();\n    var url = adapter.urlForCreateRecord('marketing-membership');\n\n    assert.equal(url, 'localhost:9000/v2/orgMemberships');\n  });\n\n  (0, _emberQunit.test)('urlForUpdateRecord', function (assert) {\n    var adapter = this.subject();\n    var url = adapter.urlForUpdateRecord('1', 'marketing-membership');\n\n    assert.equal(url, 'localhost:9000/v2/orgMemberships/1');\n  });\n});","define('dummy/tests/unit/adapters/ticket-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine'], function (_emberQunit, _testModuleForEngine) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('adapter:ticket', 'Unit | Adapter | ticket', {\n    needs: [],\n    beforeEach: function beforeEach() {\n      this.register('service:session', {}, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('directs queries with a order id to `orders/:id/tickets`', function (assert) {\n    var adapter = this.subject({\n      host: '',\n      namespace: ''\n    });\n\n    assert.equal(adapter.urlForQuery({}, 'ticket'), '/tickets', 'tickets route used if no orderId');\n\n    var query = { orderId: '1234' };\n    assert.equal(adapter.urlForQuery(query, 'ticket'), '/orders/1234/tickets', 'users route used if user Id present');\n    assert.ok(!('orderId' in query), '`orderId` was removed from query object');\n  });\n});","define('dummy/tests/unit/adapters/ticket-transfer-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine'], function (_emberQunit, _testModuleForEngine) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('adapter:ticket-transfer', 'Unit | Adapter | ticket transfer', {\n    needs: [],\n    beforeEach: function beforeEach() {\n      this.register('service:session', {}, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('`urlForQueryRecord` will use `urlForFindRecord` if id is passed in the query', function (assert) {\n    var adapter = this.subject();\n    var query = { id: '1', other: 'test' };\n\n    var url = adapter.urlForQueryRecord(query, 'ticket-transfer');\n    assert.equal(url, 'localhost:9000/v2/ticket-transfers/1');\n    assert.deepEqual(query, { other: 'test' }, 'the id was stripped from the query object');\n  });\n\n  (0, _emberQunit.test)('`urlForQueryRecord` works normally if no id is passed in the query', function (assert) {\n    var adapter = this.subject();\n    var query = { other: 'test' };\n\n    var url = adapter.urlForQueryRecord(query, 'ticket-transfer');\n    assert.equal(url, 'localhost:9000/v2/ticket-transfers');\n    assert.deepEqual(query, { other: 'test' }, 'the query was untouched');\n  });\n});","define('dummy/tests/unit/adapters/user-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine'], function (_emberQunit, _testModuleForEngine) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('adapter:user', 'Unit | Adapter | user', {\n    needs: [],\n    beforeEach: function beforeEach() {\n      this.register('service:session', {}, { instantiate: false });\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it uses the `/users/me` on queryRecord', function (assert) {\n    var adapter = this.subject();\n    var query = { me: true };\n    var url = adapter.urlForQueryRecord(query, 'user');\n    assert.equal(url, 'localhost:9000/v2/users/me');\n    assert.deepEqual(query, {}, 'me attribute stripped from query');\n  });\n});","define('dummy/tests/unit/controllers/accept/confirm-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'ember-metal/get', 'ember-metal/set'], function (_emberQunit, _testModuleForEngine, _get, _set) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('controller:accept/confirm', 'Unit | Controller | accept/confirm', {\n    needs: ['service:i18n', 'service:flashMessages'],\n    beforeEach: function beforeEach() {\n      this.register('service:metrics', {}, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('it can toggle `agreedToPromotions`', function (assert) {\n    var controller = this.subject({\n      resolvedModel: {\n        marketingPreference: {\n          emailSubscription: false\n        }\n      }\n    });\n\n    controller.send('toggleAgreedToPromotions');\n\n    assert.equal((0, _get.default)(controller, 'marketingPref.emailSubscription'), true);\n\n    controller.send('toggleAgreedToPromotions');\n\n    assert.equal((0, _get.default)(controller, 'marketingPref.emailSubscription'), false);\n  });\n\n  (0, _emberQunit.test)('the `acceptButtonDisabled` accomodates missing names', function (assert) {\n    var controller = this.subject({\n      acceptTransfer: {\n        isRunning: false\n      },\n      resolvedModel: {\n        user: {\n          firstName: 'Spencer',\n          lastName: '',\n          email: 'spencer.price@ticketfly.com'\n        }\n      }\n    });\n\n    assert.ok((0, _get.default)(controller, 'acceptButtonDisabled'), 'disabled due to missing last name');\n\n    (0, _set.default)(controller, 'user.lastName', 'Price');\n\n    assert.ok(!(0, _get.default)(controller, 'acceptButtonDisabled'), 'no longer disabled');\n\n    (0, _set.default)(controller, 'acceptTransfer.isRunning', true);\n\n    assert.ok((0, _get.default)(controller, 'acceptButtonDisabled'), 'disabled due to flag');\n  });\n\n  (0, _emberQunit.test)('the `acceptButtonDisabled` accomodates attempt to accept into same account', function (assert) {\n    var controller = this.subject({\n      acceptTransfer: {\n        isRunning: false\n      },\n      resolvedModel: {\n        user: {\n          firstName: 'Spencer',\n          lastName: 'Price',\n          email: 'spencer.price@ticketfly.com'\n        },\n        transfer: {\n          sender: { email: 'spencer.price@ticketfly.com' }\n        }\n      }\n    });\n\n    assert.ok((0, _get.default)(controller, 'acceptButtonDisabled'), 'disabled due to same user as sender');\n\n    (0, _set.default)(controller, 'user.email', 'spencer1234@ticketfly.com');\n\n    assert.ok(!(0, _get.default)(controller, 'acceptButtonDisabled'), 'no longer disabled');\n  });\n\n  (0, _emberQunit.test)('`shouldDisplayUserNames` uses the original value of keys and ignores updates', function (assert) {\n    var controller = this.subject({\n      resolvedModel: {\n        user: {\n          firstName: 'Spencer',\n          lastName: ''\n        }\n      }\n    });\n\n    assert.ok((0, _get.default)(controller, 'shouldDisplayUserNames'), 'initially is true');\n\n    (0, _set.default)(controller, 'user.lastName', 'Price');\n\n    assert.ok((0, _get.default)(controller, 'shouldDisplayUserNames'), 'remains true');\n  });\n});","define('dummy/tests/unit/controllers/new-test', ['ember-metal/get', 'ember-metal/set', 'ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'sinon'], function (_get, _set, _emberQunit, _testModuleForEngine, _sinon) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('controller:new', 'Unit | Controller | new', {\n    needs: ['service:transfers', 'service:flashMessages', 'service:i18n']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var service = {\n      setTransferState: function setTransferState() {}\n    };\n    var serviceStub = _sinon.default.stub(service, 'setTransferState');\n\n    this.register('service:transfers', service, { instantiate: false });\n\n    var controller = this.subject();\n    var transitionStub = _sinon.default.stub(controller, 'transitionToRoute');\n    var method = _sinon.default.stub();\n\n    transitionStub.returns({ method: method });\n\n    controller.send('submitTransfer');\n\n    assert.ok(transitionStub.getCall(0).calledWithExactly('new.modal.confirm'), 'the correct transition was initiated');\n    assert.ok(method.getCall(0).calledWithExactly('replace'));\n    assert.ok(serviceStub.getCall(0).calledWithExactly({\n      tickets: (0, _get.default)(controller, 'selectedTickets'),\n      email: (0, _get.default)(controller, 'transferToEmail'),\n      message: (0, _get.default)(controller, 'transferMessage')\n    }), '`setTransferState` was called on `transfers` service');\n  });\n\n  (0, _emberQunit.test)('it can reset the default state', function (assert) {\n    var controller = this.subject();\n\n    assert.equal((0, _get.default)(controller, 'transferToEmail'), '');\n    assert.equal((0, _get.default)(controller, 'transferMessage'), '');\n    assert.deepEqual((0, _get.default)(controller, 'selectedTickets'), []);\n\n    (0, _set.default)(controller, 'transferToEmail', 'test@test.com');\n    (0, _set.default)(controller, 'transferMessage', 'Hello!');\n    (0, _get.default)(controller, 'selectedTickets').pushObject({});\n\n    controller.resetState();\n\n    assert.equal((0, _get.default)(controller, 'transferToEmail'), '');\n    assert.equal((0, _get.default)(controller, 'transferMessage'), '');\n    assert.deepEqual((0, _get.default)(controller, 'selectedTickets'), []);\n  });\n});","define('dummy/tests/unit/controllers/new/modal/cancel-test', ['ember-runloop', 'sinon', 'ember-qunit', 'dummy/tests/helpers/test-module-for-engine'], function (_emberRunloop, _sinon, _emberQunit, _testModuleForEngine) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var RSVP = Ember.RSVP;\n  var resolve = RSVP.resolve,\n      reject = RSVP.reject;\n\n\n  function transferStub(result) {\n    var reload = _sinon.default.stub().returns(resolve());\n    var transfer = {\n      cancel: function cancel() {},\n      save: function save() {\n        return resolve(result);\n      },\n\n      tickets: [{ reload: reload }]\n    };\n\n    _sinon.default.stub(transfer, 'cancel').returns(transfer);\n    return {\n      model: transfer,\n      reloadStub: reload\n    };\n  }\n\n  (0, _testModuleForEngine.moduleFor)('controller:new/modal/cancel', 'Unit | Controller | new/modal/cancel', {\n    needs: [],\n    beforeEach: function beforeEach() {\n      var danger = this.danger = _sinon.default.stub();\n      var success = this.success = _sinon.default.stub();\n\n      this.register('service:flash-messages', { danger: danger, success: success }, { instantiate: false });\n      this.register('service:i18n', {\n        t: function t() {}\n      }, { instantiate: false });\n      this.register('service:metrics', {\n        trackEvent: function trackEvent() {}\n      }, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('it can cancel a ticket transfer', function () {\n    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(assert) {\n      var _transferStub, model, reloadStub, controller;\n\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _transferStub = transferStub({}), model = _transferStub.model, reloadStub = _transferStub.reloadStub;\n              controller = this.subject({ model: model });\n              _context.next = 4;\n              return (0, _emberRunloop.default)(controller.get('cancelTransfer'), 'perform');\n\n            case 4:\n\n              assert.equal(model.cancel.callCount, 1, 'the model\\'s cancel hook was called');\n              assert.equal(this.success.callCount, 1, 'the success message was sent');\n              assert.equal(this.danger.callCount, 0, 'the danger message was not sent');\n              assert.equal(reloadStub.callCount, 1, 'the ticket was reloaded');\n\n            case 8:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)('it handles a cancellation error', function () {\n    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(assert) {\n      var _transferStub2, model, reloadStub, controller;\n\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _transferStub2 = transferStub(reject({})), model = _transferStub2.model, reloadStub = _transferStub2.reloadStub;\n              controller = this.subject({ model: model });\n              _context2.next = 4;\n              return (0, _emberRunloop.default)(controller.get('cancelTransfer'), 'perform');\n\n            case 4:\n\n              assert.equal(model.cancel.callCount, 1, 'the model\\'s cancel hook was called');\n              assert.equal(this.success.callCount, 0, 'the success message was not sent');\n              assert.equal(this.danger.callCount, 1, 'the danger message was sent');\n              assert.equal(reloadStub.callCount, 0, 'the ticket was not reloaded on an error');\n\n            case 8:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)('the `cancelTransfer` action will transition to \"new\" on successful cancel', function () {\n    var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(assert) {\n      var promise, perform, cancelTransfer, controller, transitionStub, method;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              promise = resolve();\n              perform = _sinon.default.stub().returns(promise);\n              cancelTransfer = { perform: perform };\n              controller = this.subject({ cancelTransfer: cancelTransfer });\n              transitionStub = _sinon.default.stub(controller, 'transitionToRoute');\n              method = _sinon.default.stub();\n\n\n              transitionStub.returns({ method: method });\n\n              controller.send('cancelTransfer');\n\n              _context3.next = 10;\n              return promise.then(function () {\n                assert.equal(transitionStub.getCall(0).args[0], 'new');\n                assert.ok(method.getCall(0).calledWithExactly('replace'));\n              });\n\n            case 10:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/unit/controllers/new/modal/confirm-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'sinon', 'ember-runloop'], function (_emberQunit, _testModuleForEngine, _sinon, _emberRunloop) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var RSVP = Ember.RSVP;\n  var resolve = RSVP.resolve,\n      reject = RSVP.reject;\n\n\n  function saveable(result) {\n    var saveablePromise = resolve(result);\n    saveablePromise.save = function () {\n      return saveablePromise;\n    };\n    return saveablePromise;\n  }\n\n  (0, _testModuleForEngine.moduleFor)('controller:new/modal/confirm', 'Unit | Controller | new/modal/confirm', {\n    needs: [],\n    beforeEach: function beforeEach() {\n      // Create a stub for the store's createRecord hook\n      var createRecord = this.createStub = _sinon.default.stub();\n      createRecord.returns(saveable({}));\n\n      var danger = this.danger = _sinon.default.stub();\n      this.register('service:flash-messages', { danger: danger }, { instantiate: false });\n      this.register('service:store', { createRecord: createRecord }, { instantiate: false });\n      this.register('service:i18n', {\n        t: function t() {}\n      }, { instantiate: false });\n      this.register('service:metrics', {\n        trackEvent: function trackEvent() {}\n      }, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('it can create a transfer', function () {\n    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(assert) {\n      var controller, transitionStub, method;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              controller = this.subject();\n              transitionStub = _sinon.default.stub(controller, 'transitionToRoute');\n              method = _sinon.default.stub();\n\n\n              transitionStub.returns({ method: method });\n              _sinon.default.stub(controller, 'send');\n\n              controller.set('model', {\n                tickets: [{ id: '1' }, { id: '2' }],\n                email: 'foo@bar.baz',\n                message: 'test'\n              });\n\n              _context.next = 8;\n              return (0, _emberRunloop.default)(controller.get('createTransfer'), 'perform');\n\n            case 8:\n\n              assert.deepEqual(this.createStub.getCall(0).args[1], {\n                tickets: [{ id: '1' }, { id: '2' }],\n                message: 'test',\n                recipient: {\n                  email: 'foo@bar.baz'\n                }\n              });\n\n            case 9:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)('it redirects to `/success` on successful transfer', function () {\n    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(assert) {\n      var controller, transitionStub, method, loading;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              controller = this.subject();\n              transitionStub = _sinon.default.stub(controller, 'transitionToRoute');\n              method = _sinon.default.stub();\n              loading = _sinon.default.stub(controller, 'send');\n\n\n              transitionStub.returns({ method: method });\n\n              controller.set('model', {\n                tickets: [], recipient: {}\n              });\n\n              _context2.next = 8;\n              return (0, _emberRunloop.default)(controller.get('createTransfer'), 'perform');\n\n            case 8:\n\n              assert.equal(loading.getCall(0).args[0], 'showLoading', 'the `showLoading` hook was triggered');\n              assert.equal(transitionStub.getCall(0).args[0], 'new.modal.success', 'transitioned to success route');\n              assert.ok(method.getCall(0).calledWith('replace'));\n\n            case 11:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)('it redirects to `/error` on failed transfer', function () {\n    var _ref3 = _asyncToGenerator(regeneratorRuntime.mark(function _callee3(assert) {\n      var controller, transitionStub, method, loading;\n      return regeneratorRuntime.wrap(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              controller = this.subject();\n              transitionStub = _sinon.default.stub(controller, 'transitionToRoute');\n              method = _sinon.default.stub();\n              loading = _sinon.default.stub(controller, 'send');\n\n\n              transitionStub.returns({ method: method });\n\n              // Create a rejecting promise.\n              this.createStub.returns(saveable(reject({})));\n\n              controller.set('model', {\n                tickets: [], recipient: {}\n              });\n\n              _context3.next = 9;\n              return (0, _emberRunloop.default)(controller.get('createTransfer'), 'perform');\n\n            case 9:\n\n              assert.equal(loading.getCall(0).args[0], 'showLoading', 'the `showLoading` hook was triggered');\n              assert.equal(transitionStub.getCall(0).args[0], 'new.modal.confirm', 'transitioned back to confirm route');\n              assert.equal(this.danger.callCount, 1, 'triggered a flashMessage');\n              assert.ok(method.getCall(0).calledWith('replace'));\n\n            case 13:\n            case 'end':\n              return _context3.stop();\n          }\n        }\n      }, _callee3, this);\n    }));\n\n    return function (_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/unit/helpers/array-copy-test', ['ticket-transfer-addon/helpers/array-copy', 'qunit'], function (_arrayCopy, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | array copy');\n\n  (0, _qunit.test)('it works with arrays', function (assert) {\n    var array = [{}, {}];\n    var result = (0, _arrayCopy.arrayCopy)([array]);\n    assert.notEqual(array, result, 'not the same instance');\n    assert.deepEqual(array, result, 'but is the same contents');\n  });\n\n  (0, _qunit.test)('it works with falsey values', function (assert) {\n    var result = (0, _arrayCopy.arrayCopy)([null]);\n    assert.deepEqual(result, [], 'falsey are converted into empty arrays');\n  });\n\n  (0, _qunit.test)('it works with non-array values', function (assert) {\n    var result = (0, _arrayCopy.arrayCopy)([12]);\n    assert.deepEqual(result, [12]);\n  });\n});","define('dummy/tests/unit/helpers/barcode-obfuscator-test', ['ticket-transfer-addon/helpers/barcode-obfuscator', 'qunit'], function (_barcodeObfuscator, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | barcode obfuscator');\n\n  (0, _qunit.test)('it works', function (assert) {\n    var result = (0, _barcodeObfuscator.barcodeObfuscator)(['123456789']);\n\n    assert.equal(result, '*****6789');\n  });\n\n  (0, _qunit.test)('it converts to a string if other type', function (assert) {\n    var result = (0, _barcodeObfuscator.barcodeObfuscator)([12345]);\n\n    assert.equal(result, '*2345');\n  });\n\n  (0, _qunit.test)('it returns an empty string if original is empty string', function (assert) {\n    var result = (0, _barcodeObfuscator.barcodeObfuscator)(['']);\n\n    assert.equal(result, '');\n  });\n\n  (0, _qunit.test)('it returns an empty string if original is null', function (assert) {\n    var result = (0, _barcodeObfuscator.barcodeObfuscator)([]);\n\n    assert.equal(result, '');\n  });\n});","define('dummy/tests/unit/helpers/line-breaker-test', ['ticket-transfer-addon/helpers/line-breaker', 'qunit'], function (_lineBreaker, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | line breaker');\n\n  (0, _qunit.test)('it creates a span node to contain all the parts', function (assert) {\n    var node = (0, _lineBreaker.lineBreaker)(['test']);\n\n    assert.equal(node.nodeName, 'SPAN');\n  });\n\n  (0, _qunit.test)('it creates a text node if only one line of text', function (assert) {\n    var node = (0, _lineBreaker.lineBreaker)(['test']);\n\n    assert.equal(node.childNodes.length, 1);\n    assert.equal(node.childNodes[0].nodeName, '#text');\n  });\n\n  (0, _qunit.test)('it creates a <br> for each line break', function (assert) {\n    var node = (0, _lineBreaker.lineBreaker)(['test\\nthing']);\n\n    assert.equal(node.childNodes.length, 3);\n\n    assert.equal(node.childNodes[0].textContent, 'test');\n    assert.equal(node.childNodes[2].textContent, 'thing');\n    assert.equal(node.childNodes[1].nodeName, 'BR');\n  });\n\n  (0, _qunit.test)('it supports double line breaks', function (assert) {\n    var node = (0, _lineBreaker.lineBreaker)(['test\\n\\nthing']);\n\n    assert.equal(node.childNodes.length, 4);\n\n    assert.equal(node.childNodes[0].textContent, 'test');\n    assert.equal(node.childNodes[1].nodeName, 'BR');\n    assert.equal(node.childNodes[2].nodeName, 'BR');\n    assert.equal(node.childNodes[3].textContent, 'thing');\n  });\n\n  (0, _qunit.test)('it does not allow for arbitrary html', function (assert) {\n    var node = (0, _lineBreaker.lineBreaker)(['<b>Hello!</b>\\nthing']);\n\n    assert.equal(node.childNodes.length, 3);\n\n    assert.equal(node.childNodes[0].textContent, '<b>Hello!</b>');\n    assert.equal(node.childNodes[2].textContent, 'thing');\n    assert.equal(node.childNodes[1].nodeName, 'BR');\n  });\n});","define('dummy/tests/unit/helpers/tta-inc-test', ['ticket-transfer-addon/helpers/tta-inc', 'qunit'], function (_ttaInc, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | tta inc');\n\n  (0, _qunit.test)('it increments by 1 by default', function (assert) {\n    assert.expect(1);\n\n    var result = (0, _ttaInc.ttaInc)([42]);\n\n    assert.equal(result, 43, 'number is correct');\n  });\n\n  (0, _qunit.test)('it increments by the second param if provided', function (assert) {\n    assert.expect(1);\n\n    var result = (0, _ttaInc.ttaInc)([42, 2]);\n\n    assert.equal(result, 44, 'number is correct');\n  });\n});","define('dummy/tests/unit/helpers/tta-section-details-test', ['ember-string', 'ticket-transfer-addon/helpers/tta-section-details', 'qunit'], function (_emberString, _ttaSectionDetails, _qunit) {\n  'use strict';\n\n  var _slicedToArray = function () {\n    function sliceIterator(arr, i) {\n      var _arr = [];\n      var _n = true;\n      var _d = false;\n      var _e = undefined;\n\n      try {\n        for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {\n          _arr.push(_s.value);\n\n          if (i && _arr.length === i) break;\n        }\n      } catch (err) {\n        _d = true;\n        _e = err;\n      } finally {\n        try {\n          if (!_n && _i[\"return\"]) _i[\"return\"]();\n        } finally {\n          if (_d) throw _e;\n        }\n      }\n\n      return _arr;\n    }\n\n    return function (arr, i) {\n      if (Array.isArray(arr)) {\n        return arr;\n      } else if (Symbol.iterator in Object(arr)) {\n        return sliceIterator(arr, i);\n      } else {\n        throw new TypeError(\"Invalid attempt to destructure non-iterable instance\");\n      }\n    };\n  }();\n\n  (0, _qunit.module)('Unit | Helper | tta section details', {\n    beforeEach: function beforeEach() {\n      this.i18n = {\n        t: function t(path) {\n          var _path$split = path.split('.'),\n              _path$split2 = _slicedToArray(_path$split, 2),\n              key = _path$split2[1];\n\n          return (0, _emberString.capitalize)(key);\n        }\n      };\n    }\n  });\n\n  (0, _qunit.test)('it accepts a properties object', function (assert) {\n    var result = (0, _ttaSectionDetails.ttaSectionDetails)([{\n      section: 'foo',\n      row: 'bar',\n      seat: 'baz',\n      variantName: 'Reserved'\n    }], {}, this.i18n);\n\n    assert.equal(result.toString(), 'Section foo &#183; Row bar &#183; Seat baz');\n  });\n\n  (0, _qunit.test)('it accepts individual properties', function (assert) {\n    var result = (0, _ttaSectionDetails.ttaSectionDetails)([], {\n      section: 'foo',\n      row: 'bar',\n      seat: 'baz'\n    }, this.i18n);\n\n    assert.equal(result.toString(), 'Section foo &#183; Row bar &#183; Seat baz');\n  });\n\n  (0, _qunit.test)('it accepts a properties object with individual overrides', function (assert) {\n    var result = (0, _ttaSectionDetails.ttaSectionDetails)([{\n      section: 'foo',\n      row: 'bar',\n      seat: 'baz',\n      variantName: 'Reserved'\n    }], {\n      row: 'bar2'\n    }, this.i18n);\n\n    assert.equal(result.toString(), 'Section foo &#183; Row bar2 &#183; Seat baz');\n  });\n\n  (0, _qunit.test)('it accepts a not-complete properties object', function (assert) {\n    var result = (0, _ttaSectionDetails.ttaSectionDetails)([{\n      section: 'foo'\n    }], {}, this.i18n);\n\n    assert.equal(result, 'Section foo');\n  });\n\n  (0, _qunit.test)('it results in empty string if no details provided', function (assert) {\n    var result = (0, _ttaSectionDetails.ttaSectionDetails)([{}], {}, this.i18n);\n\n    assert.equal(result, '');\n  });\n});","define('dummy/tests/unit/helpers/tta-transfer-state-test', ['sinon', 'ticket-transfer-addon/helpers/tta-transfer-state', 'qunit'], function (_sinon, _ttaTransferState, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Helper | tta transfer state', {\n    beforeEach: function beforeEach() {\n      var t = this.translate = _sinon.default.stub();\n      this.i18n = { t: t };\n    }\n  });\n\n  // Replace this with your real tests.\n  (0, _qunit.test)('it renders nothing if ticket is transferable', function (assert) {\n    var result = (0, _ttaTransferState.ttaTransferState)([{\n      transferable: true,\n      description: 'READY_TO_TRANSFER'\n    }], {}, this.i18n);\n\n    assert.equal(result, '');\n  });\n\n  (0, _qunit.test)('it renders description if ticket is not transferable', function (assert) {\n    var result = (0, _ttaTransferState.ttaTransferState)([{\n      transferable: false,\n      description: 'Non-transferable / Outdated'\n    }], {}, this.i18n);\n\n    assert.equal(result, 'Non-transferable / Outdated');\n  });\n\n  (0, _qunit.test)('it shows state if not transferable with no transfer', function (assert) {\n    this.translate.returns('Transfer Disabled');\n\n    var result = (0, _ttaTransferState.ttaTransferState)([{\n      transferable: false\n    }], {}, this.i18n);\n\n    assert.equal(result, 'Transfer Disabled');\n  });\n\n  (0, _qunit.test)('it shows state if not transferable with successful transfer', function (assert) {\n    this.translate.withArgs('transfer_request.transferred_to', { email: 'alexander@hamilton.com' }).returns('Transferred to alexander@hamilton.com');\n\n    var result = (0, _ttaTransferState.ttaTransferState)([{\n      transferable: false\n    }, {\n      isPending: false,\n      recipient: {\n        email: 'alexander@hamilton.com'\n      }\n    }], {}, this.i18n);\n\n    assert.equal(result, 'Transferred to alexander@hamilton.com');\n  });\n\n  (0, _qunit.test)('it shows state transfer not yet accepted', function (assert) {\n    this.translate.withArgs('transfer_request.awaiting_acceptance_from', { email: 'alexander@hamilton.com' }).returns('Awaiting acceptance from alexander@hamilton.com');\n\n    var result = (0, _ttaTransferState.ttaTransferState)([{\n      transferable: false\n    }, {\n      isPending: true,\n      recipient: {\n        email: 'alexander@hamilton.com'\n      }\n    }], {}, this.i18n);\n\n    assert.equal(result, 'Awaiting acceptance from alexander@hamilton.com');\n  });\n\n  (0, _qunit.test)('it shows state transfer not yet accepted even with transfer state description', function (assert) {\n    this.translate.withArgs('transfer_request.awaiting_acceptance_from', { email: 'alexander@hamilton.com' }).returns('Awaiting acceptance from alexander@hamilton.com');\n\n    var result = (0, _ttaTransferState.ttaTransferState)([{\n      transferable: false,\n      description: 'Pending transfer'\n    }, {\n      isPending: true,\n      recipient: {\n        email: 'alexander@hamilton.com'\n      }\n    }], {}, this.i18n);\n\n    assert.equal(result, 'Awaiting acceptance from alexander@hamilton.com');\n  });\n\n  (0, _qunit.test)('it will show state description if not transferable, but has cancelled transfer', function (assert) {\n    var result = (0, _ttaTransferState.ttaTransferState)([{\n      transferable: false,\n      description: 'Non-resellable / Scanned'\n    }, { isCancelled: true }], {}, this.i18n);\n\n    assert.equal(result, 'Non-resellable / Scanned');\n  });\n});","define('dummy/tests/unit/mixins/new-transfer-state-model-test', ['ember-object', 'ticket-transfer-addon/mixins/new-transfer-state-model', 'qunit'], function (_emberObject, _newTransferStateModel, _qunit) {\n  'use strict';\n\n  (0, _qunit.module)('Unit | Mixin | new transfer state model');\n\n  (0, _qunit.test)('it exists', function (assert) {\n    // This mixin is implicitly tested in acceptances tests and the `routes/new/confirm-test`\n    var NewTransferStateModelObject = _emberObject.default.extend(_newTransferStateModel.default);\n    var subject = NewTransferStateModelObject.create();\n    assert.ok(subject);\n  });\n});","define('dummy/tests/unit/models/event-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('event', 'Unit | Model | event', {});\n\n  (0, _emberQunit.test)('it should exist', function (assert) {\n    var Event = this.store().modelFor('event');\n    assert.ok(Event);\n  });\n});","define('dummy/tests/unit/models/marketing-membership-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('marketing-membership', 'Unit | Model |  marketing membership', {});\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var MarketingMembership = this.store().modelFor('marketing-membership');\n    assert.ok(MarketingMembership);\n  });\n});","define('dummy/tests/unit/models/ticket-test', ['ember-metal/get', 'ember-qunit'], function (_get, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('ticket', 'Unit | Model | ticket', {\n    needs: ['model:event', 'model:ticket-transfer']\n  });\n\n  (0, _emberQunit.test)('transferState is passed as an unmodified POJO', function (assert) {\n    var transferState = {};\n    var model = this.subject({ transferState: transferState });\n\n    assert.equal(model.get('transferState'), transferState);\n  });\n\n  (0, _emberQunit.test)('should belong to an event', function (assert) {\n    var Ticket = this.store().modelFor('ticket');\n    var relationship = (0, _get.default)(Ticket, 'relationshipsByName').get('event');\n\n    assert.equal(relationship.key, 'event');\n    assert.equal(relationship.kind, 'belongsTo');\n  });\n\n  (0, _emberQunit.test)('should belong to a ticket-transfer', function (assert) {\n    var Ticket = this.store().modelFor('ticket');\n    var relationship = (0, _get.default)(Ticket, 'relationshipsByName').get('transfer');\n\n    assert.equal(relationship.key, 'transfer');\n    assert.equal(relationship.kind, 'belongsTo');\n  });\n});","define('dummy/tests/unit/models/ticket-transfer-test', ['ember-metal/get', 'ember-metal/set', 'ember-runloop', 'ember-qunit'], function (_get, _set, _emberRunloop, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('ticket-transfer', 'Unit | Model | ticket transfer', {\n    needs: ['model:ticket', 'model:event']\n  });\n\n  (0, _emberQunit.test)('mode defaults to RECIPIENT_ACCEPT', function (assert) {\n    var model = this.subject();\n    assert.equal((0, _get.default)(model, 'mode'), 'RECIPIENT_ACCEPT');\n  });\n\n  (0, _emberQunit.test)('status defaults to PENDING', function (assert) {\n    var model = this.subject();\n    assert.equal((0, _get.default)(model, 'status'), 'PENDING');\n  });\n\n  (0, _emberQunit.test)('should have many tickets', function (assert) {\n    var TicketTransfer = this.store().modelFor('ticket-transfer');\n    var relationship = (0, _get.default)(TicketTransfer, 'relationshipsByName').get('tickets');\n\n    assert.equal(relationship.key, 'tickets');\n    assert.equal(relationship.kind, 'hasMany');\n  });\n\n  (0, _emberQunit.test)('the `accept` hook sets the correct status', function (assert) {\n    var ticket = (0, _emberRunloop.default)(this.store(), 'createRecord', 'ticket');\n    var model = this.subject({\n      tickets: [ticket]\n    });\n\n    assert.equal((0, _get.default)(model, 'status'), 'PENDING');\n\n    var chain = void 0;\n\n    (0, _emberRunloop.default)(function () {\n      chain = model.accept('1234-4567');\n    });\n\n    assert.equal((0, _get.default)(model, 'status'), 'COMPLETED');\n    assert.equal((0, _get.default)(model, 'acceptanceToken'), '1234-4567');\n    assert.equal(chain, model, 'the hook is chainable');\n  });\n\n  (0, _emberQunit.test)('the `accept` hook sets the correct status if empty tickets', function (assert) {\n    var model = this.subject({\n      tickets: []\n    });\n\n    assert.equal((0, _get.default)(model, 'status'), 'PENDING');\n\n    var chain = void 0;\n\n    (0, _emberRunloop.default)(function () {\n      chain = model.accept();\n    });\n\n    assert.equal((0, _get.default)(model, 'status'), 'DENIED');\n    assert.equal(chain, model, 'the hook is chainable');\n  });\n\n  (0, _emberQunit.test)('the `accept` hook sets the correct status if empty tickets', function (assert) {\n    var model = this.subject({\n      tickets: []\n    });\n\n    assert.equal((0, _get.default)(model, 'status'), 'PENDING');\n\n    var chain = void 0;\n\n    (0, _emberRunloop.default)(function () {\n      chain = model.accept();\n    });\n\n    assert.equal((0, _get.default)(model, 'status'), 'DENIED');\n    assert.equal(chain, model, 'the hook is chainable');\n  });\n\n  (0, _emberQunit.test)('the `cancel` hook sets the correct status', function (assert) {\n    var model = this.subject();\n\n    assert.equal((0, _get.default)(model, 'status'), 'PENDING');\n\n    var chain = void 0;\n\n    (0, _emberRunloop.default)(function () {\n      chain = model.cancel();\n    });\n\n    assert.equal((0, _get.default)(model, 'status'), 'CANCELLED');\n    assert.equal(chain, model, 'the hook is chainable');\n  });\n\n  (0, _emberQunit.test)('the `isCancelable` property works', function (assert) {\n    var model = this.subject();\n\n    assert.ok(model.get('isCancelable'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'status', 'COMPLETED');\n\n    assert.ok(!model.get('isCancelable'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'status', 'DENIED');\n\n    assert.ok(!model.get('isCancelable'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'status', 'CANCELLED');\n\n    assert.ok(!model.get('isCancelable'));\n  });\n\n  (0, _emberQunit.test)('the `isPending` property works', function (assert) {\n    var model = this.subject();\n\n    assert.ok(model.get('isPending'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'status', 'COMPLETED');\n\n    assert.ok(!model.get('isPending'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'status', 'DENIED');\n\n    assert.ok(!model.get('isPending'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'status', 'CANCELLED');\n\n    assert.ok(!model.get('isPending'));\n  });\n\n  (0, _emberQunit.test)('the `isCancelled` property works', function (assert) {\n    var model = this.subject();\n\n    assert.ok(!model.get('isCancelled'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'status', 'COMPLETED');\n\n    assert.ok(!model.get('isCancelled'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'status', 'DENIED');\n\n    assert.ok(!model.get('isCancelled'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'status', 'CANCELLED');\n\n    assert.ok(model.get('isCancelled'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'status', '');\n\n    assert.ok(model.get('isCancelled'));\n  });\n\n  (0, _emberQunit.test)('the `isAcceptable` property works', function (assert) {\n    var model = this.subject();\n\n    assert.ok(model.get('isAcceptable'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'status', 'COMPLETED');\n\n    assert.ok(!model.get('isAcceptable'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'status', 'DENIED');\n\n    assert.ok(!model.get('isAcceptable'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'status', 'CANCELLED');\n\n    assert.ok(!model.get('isAcceptable'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'status', 'PENDING');\n\n    assert.ok(model.get('isAcceptable'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'acceptanceState', {\n      acceptable: false\n    });\n\n    assert.ok(!model.get('isAcceptable'));\n  });\n\n  (0, _emberQunit.test)('the `isTransferred` property works', function (assert) {\n    var model = this.subject();\n\n    assert.ok(!model.get('isTransferred'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'status', 'COMPLETED');\n\n    assert.ok(model.get('isTransferred'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'status', 'DENIED');\n\n    assert.ok(!model.get('isTransferred'));\n\n    (0, _emberRunloop.default)(null, _set.default, model, 'status', 'CANCELLED');\n\n    assert.ok(!model.get('isTransferred'));\n  });\n});","define('dummy/tests/unit/models/user-test', ['ember-qunit', 'ember-metal/get', 'sinon'], function (_emberQunit, _get, _sinon) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Model | user', {\n    needs: ['service:metrics']\n  });\n\n  (0, _emberQunit.test)('it exists and has an ID', function (assert) {\n    var model = this.subject({ id: 1234 });\n    assert.equal(model.get('id'), '1234');\n  });\n\n  (0, _emberQunit.test)('it will identify a user with metrics service', function (assert) {\n    var model = this.subject({\n      id: '1234',\n      firstName: 'Spencer',\n      lastName: 'Price'\n    });\n\n    var metrics = (0, _get.default)(model, 'metrics');\n    var aliasStub = _sinon.default.stub(metrics, 'alias');\n    var identifyStub = _sinon.default.stub(metrics, 'identify');\n\n    model.identifyUserForMetrics();\n\n    assert.equal(aliasStub.callCount, 1);\n    assert.ok(aliasStub.getCall(0).calledWithExactly({\n      alias: '1234'\n    }));\n\n    assert.equal(identifyStub.callCount, 1);\n    assert.ok(identifyStub.getCall(0).calledWithExactly({\n      distinctId: '1234',\n      firstName: 'Spencer',\n      lastName: 'Price'\n    }));\n  });\n});","define('dummy/tests/unit/routes/accept-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine'], function (_emberQunit, _testModuleForEngine) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('route:accept', 'Unit | Route | accept', {\n    needs: [],\n    beforeEach: function beforeEach() {\n      this.register('service:session', {}, { instantiate: false });\n    }\n  });\n\n  // TODO: Test the model hook.\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/accept/confirm-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'sinon', 'ember-runloop', 'ember-array/utils'], function (_emberQunit, _testModuleForEngine, _sinon, _emberRunloop, _utils) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var RSVP = Ember.RSVP;\n  var resolve = RSVP.resolve;\n\n\n  (0, _testModuleForEngine.moduleFor)('route:accept/confirm', 'Unit | Route | accept/confirm', {\n    needs: [],\n    beforeEach: function beforeEach() {\n      this.register('service:metrics', {}, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n\n  (0, _emberQunit.test)('if defaultMemberships array exists and orgId is correct, it returns correct defaultEmailSub value', function (assert) {\n    var route = this.subject();\n\n    var meta = {\n      defaultMemberships: [{\n        defaultEmailSub: false,\n        orgId: 1\n      }]\n    };\n\n    var emailSub = route.defaultValueForOrg({ meta: meta }, 1);\n\n    assert.equal(emailSub, false, 'it returns false');\n  });\n\n  (0, _emberQunit.test)('if defaultMemberships array exists and orgId is a string, it returns correct defaultEmailSub value', function (assert) {\n    var route = this.subject();\n\n    var meta = {\n      defaultMemberships: [{\n        defaultEmailSub: false,\n        orgId: 1\n      }]\n    };\n\n    var emailSub = route.defaultValueForOrg({ meta: meta }, \"1\");\n\n    assert.equal(emailSub, false, 'it returns false');\n  });\n\n  (0, _emberQunit.test)('if the orgId is incorrect, it returns the default value true', function (assert) {\n    var route = this.subject();\n\n    var meta = {\n      defaultMemberships: [{\n        defaultEmailSub: true,\n        orgId: 1\n      }]\n    };\n\n    var orgDefaultValue = route.defaultValueForOrg({ meta: meta }, 4);\n\n    assert.equal(orgDefaultValue, true, 'it returns true');\n  });\n\n  (0, _emberQunit.test)('if the no meta object is present, it returns the detault value true', function (assert) {\n    var route = this.subject();\n    var orgDefaultValue = route.defaultValueForOrg({}, 4);\n\n    assert.equal(orgDefaultValue, true, 'it returns true');\n  });\n\n  (0, _emberQunit.test)('if membership exists, return membership', function () {\n    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(assert) {\n      var route, eventPromise, userPromise, store, queryStub, membershipStub, membership;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              route = this.subject();\n              eventPromise = resolve({ organizationId: 1 });\n              userPromise = resolve({ id: 2 });\n              store = route.get('store');\n              queryStub = _sinon.default.stub(store, 'query');\n              membershipStub = {};\n\n              queryStub.returns(resolve((0, _utils.A)([membershipStub])));\n\n              _context.next = 9;\n              return (0, _emberRunloop.default)(function () {\n                return route.get('getMarketingPreference').perform(eventPromise, userPromise);\n              });\n\n            case 9:\n              membership = _context.sent;\n\n\n              assert.equal(membership, membershipStub, 'resolves with membership');\n              assert.ok(queryStub.getCall(0).calledWithExactly('marketing-membership', { userId: 2, orgId: 1 }));\n\n            case 12:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)('if membership does not exist, run defaultValueForOrg method', function () {\n    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(assert) {\n      var route, eventPromise, userPromise, store, queryStub, createStub, initialMembership, defaultValueForOrgStub, membership;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              route = this.subject();\n              eventPromise = resolve({ organizationId: 1 });\n              userPromise = resolve({ id: 2 });\n              store = route.get('store');\n              queryStub = _sinon.default.stub(store, 'query');\n              createStub = _sinon.default.stub(store, 'createRecord');\n\n\n              queryStub.returns(resolve((0, _utils.A)([])));\n\n              initialMembership = {};\n              defaultValueForOrgStub = _sinon.default.stub(route, 'defaultValueForOrg');\n\n\n              createStub.returns(initialMembership);\n              defaultValueForOrgStub.returns(true);\n\n              _context2.next = 13;\n              return (0, _emberRunloop.default)(function () {\n                return route.get('getMarketingPreference').perform(eventPromise, userPromise);\n              });\n\n            case 13:\n              membership = _context2.sent;\n\n\n              assert.equal(membership, initialMembership, 'resolves with membership');\n              assert.ok(createStub.getCall(0).calledWithExactly('marketing-membership', {\n                userId: 2,\n                orgId: 1,\n                emailSubscription: true\n              }));\n\n            case 16:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/unit/routes/accept/confirm/terms-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine'], function (_emberQunit, _testModuleForEngine) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('route:accept/confirm/terms', 'Unit | Route | accept/confirm/terms', {\n    needs: [],\n    beforeEach: function beforeEach() {\n      this.register('service:metrics', {}, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/accept/index-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'sinon'], function (_emberQunit, _testModuleForEngine, _sinon) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var RSVP = Ember.RSVP;\n  var resolve = RSVP.resolve;\n\n\n  (0, _testModuleForEngine.moduleFor)('route:accept/index', 'Unit | Route | accept/index', {\n    needs: [],\n    beforeEach: function beforeEach() {\n      this.register('service:metrics', {}, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('it redirects to `confirm` if the transfer is accpetable', function () {\n    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(assert) {\n      var replaceWith, route, transfer;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              replaceWith = _sinon.default.stub();\n              route = this.subject({ replaceWith: replaceWith });\n              transfer = resolve({ isAcceptable: true });\n              _context.next = 5;\n              return route.afterModel({ transfer: transfer });\n\n            case 5:\n\n              assert.ok(replaceWith.getCall(0).calledWithExactly('accept.confirm'));\n\n            case 6:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n\n  (0, _emberQunit.test)('it does not redirect to `confirm` if the transfer is not accpetable', function () {\n    var _ref2 = _asyncToGenerator(regeneratorRuntime.mark(function _callee2(assert) {\n      var replaceWith, route, transfer;\n      return regeneratorRuntime.wrap(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              replaceWith = _sinon.default.stub();\n              route = this.subject({ replaceWith: replaceWith });\n              transfer = resolve({ isAcceptable: false });\n              _context2.next = 5;\n              return route.afterModel({ transfer: transfer });\n\n            case 5:\n\n              assert.equal(replaceWith.callCount, 0, 'no redirect');\n\n            case 6:\n            case 'end':\n              return _context2.stop();\n          }\n        }\n      }, _callee2, this);\n    }));\n\n    return function (_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/unit/routes/accept/success-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine'], function (_emberQunit, _testModuleForEngine) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('route:accept/success', 'Unit | Route | accept/success', {\n    needs: [],\n    beforeEach: function beforeEach() {\n      this.register('service:metrics', {}, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/application-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine'], function (_emberQunit, _testModuleForEngine) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('route:application', 'Unit | Route | application', {\n    needs: [],\n    beforeEach: function beforeEach() {\n      this.register('service:metrics', {}, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/new-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'sinon'], function (_emberQunit, _testModuleForEngine, _sinon) {\n  'use strict';\n\n  function _asyncToGenerator(fn) {\n    return function () {\n      var gen = fn.apply(this, arguments);\n      return new Promise(function (resolve, reject) {\n        function step(key, arg) {\n          try {\n            var info = gen[key](arg);\n            var value = info.value;\n          } catch (error) {\n            reject(error);\n            return;\n          }\n\n          if (info.done) {\n            resolve(value);\n          } else {\n            return Promise.resolve(value).then(function (value) {\n              step(\"next\", value);\n            }, function (err) {\n              step(\"throw\", err);\n            });\n          }\n        }\n\n        return step(\"next\");\n      });\n    };\n  }\n\n  var RSVP = Ember.RSVP;\n  var resolve = RSVP.resolve,\n      hash = RSVP.hash;\n\n\n  (0, _testModuleForEngine.moduleFor)('route:new', 'Unit | Route | new', {\n    needs: [],\n    beforeEach: function beforeEach() {\n      this.register('service:metrics', {}, { instantiate: false });\n      this.register('service:session', {}, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('required ticket query parameters are all present', function () {\n    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(assert) {\n      var query, queryRecord, route;\n      return regeneratorRuntime.wrap(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              query = _sinon.default.stub();\n              queryRecord = _sinon.default.stub().returns(resolve({ id: '2' }));\n\n\n              this.register('service:store', {\n                queryRecord: queryRecord,\n                query: query,\n                find: function find() {}\n              }, { instantiate: false });\n\n              route = this.subject();\n              _context.next = 6;\n              return hash(route.model({ orderId: '1234', eventId: '9876' }));\n\n            case 6:\n\n              assert.equal(query.getCall(0).args[1].transferredTickets, true, 'the transferred tickets was added to the query');\n              assert.equal(query.getCall(0).args[1].orderId, 1234, 'the sale code was added to the query');\n              assert.equal(query.getCall(0).args[1].include, 'transfers', 'the include was added to the query');\n              assert.equal(query.getCall(0).args[1].eventId, 9876, 'the event id was added to the query');\n\n            case 10:\n            case 'end':\n              return _context.stop();\n          }\n        }\n      }, _callee, this);\n    }));\n\n    return function (_x) {\n      return _ref.apply(this, arguments);\n    };\n  }());\n});","define('dummy/tests/unit/routes/new/modal-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine'], function (_emberQunit, _testModuleForEngine) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('route:new/modal', 'Unit | Route | new/modal', {\n    needs: [],\n    beforeEach: function beforeEach() {\n      this.register('service:metrics', {}, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/new/modal/cancel-test', ['ember-object', 'ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'sinon'], function (_emberObject, _emberQunit, _testModuleForEngine, _sinon) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('route:new/modal/cancel', 'Unit | Route | new/modal/cancel', {\n    needs: ['service:i18n', 'service:flash-messages', 'model:ticket-transfer'],\n    beforeEach: function beforeEach() {\n      this.register('service:metrics', {}, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('the route fetches the model from the local store cache', function (assert) {\n    var peekRecord = _sinon.default.stub();\n    var store = { peekRecord: peekRecord };\n\n    var route = this.subject({ store: store });\n\n    var model = {};\n    peekRecord.returns(model);\n\n    var result = route.model({ transferId: '1234' });\n\n    assert.equal(result, model);\n    assert.ok(peekRecord.getCall(0).calledWithExactly('ticket-transfer', '1234'));\n  });\n\n  (0, _emberQunit.test)('the route will send an error and transition away if there is no local store cache for the transfer', function (assert) {\n    var danger = _sinon.default.stub();\n    var replaceWith = _sinon.default.stub();\n    var flashMessages = { danger: danger };\n    var i18n = {\n      t: function t() {}\n    };\n\n    var route = this.subject({ flashMessages: flashMessages, replaceWith: replaceWith, i18n: i18n });\n\n    var model = route.model({ transferId: '1234' });\n\n    route.setupController(_emberObject.default.create(), model);\n\n    assert.ok(replaceWith.getCall(0).calledWithExactly('new'));\n    assert.equal(danger.callCount, 1, 'a flash message was sent');\n  });\n});","define('dummy/tests/unit/routes/new/modal/confirm-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine', 'sinon'], function (_emberQunit, _testModuleForEngine, _sinon) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('route:new/modal/confirm', 'Unit | Route | new/modal/confirm', {\n    needs: [],\n    beforeEach: function beforeEach() {\n      this.register('service:metrics', {}, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('it gets the model from the `transfers` service', function (assert) {\n    var service = {\n      getTransferState: function getTransferState() {}\n    };\n    var serviceStub = _sinon.default.stub(service, 'getTransferState');\n\n    serviceStub.returns({\n      tickets: [{}],\n      email: 'foo@bar.baz'\n    });\n\n    this.register('service:transfers', service, { instantiate: false });\n\n    var route = this.subject();\n\n    assert.deepEqual(route.model(), {\n      tickets: [{}],\n      email: 'foo@bar.baz'\n    });\n\n    assert.equal(serviceStub.callCount, 1, '`getTransferState` was called once');\n  });\n\n  (0, _emberQunit.test)('it redirects with empty tickets array', function (assert) {\n    var service = {\n      getTransferState: function getTransferState() {}\n    };\n    var serviceStub = _sinon.default.stub(service, 'getTransferState');\n\n    serviceStub.returns({\n      tickets: [],\n      email: 'foo@bar.baz'\n    });\n\n    this.register('service:transfers', service, { instantiate: false });\n\n    var route = this.subject();\n    var transitionStub = _sinon.default.stub(route, 'replaceWith');\n\n    assert.ok(!route.model(), 'model returns falsey value');\n    assert.equal(serviceStub.callCount, 1, '`getTransferState` was called once');\n    assert.ok(transitionStub.getCall(0).calledWithExactly('new.index'), 'transition back to order transfer page');\n  });\n\n  (0, _emberQunit.test)('it redirects with empty email', function (assert) {\n    var service = {\n      getTransferState: function getTransferState() {}\n    };\n    var serviceStub = _sinon.default.stub(service, 'getTransferState');\n\n    serviceStub.returns({\n      tickets: [{}],\n      email: ''\n    });\n\n    this.register('service:transfers', service, { instantiate: false });\n\n    var route = this.subject();\n    var transitionStub = _sinon.default.stub(route, 'replaceWith');\n\n    assert.ok(!route.model(), 'model returns falsey value');\n    assert.equal(serviceStub.callCount, 1, '`getTransferState` was called once');\n    assert.ok(transitionStub.getCall(0).calledWithExactly('new.index'), 'transition back to order transfer page');\n  });\n});","define('dummy/tests/unit/routes/new/modal/index-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine'], function (_emberQunit, _testModuleForEngine) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('route:new/modal/index', 'Unit | Route | new/modal/index', {\n    needs: [],\n    beforeEach: function beforeEach() {\n      this.register('service:metrics', {}, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/new/modal/success-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine'], function (_emberQunit, _testModuleForEngine) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('route:new/modal/success', 'Unit | Route | new/modal/success', {\n    needs: ['service:transfers'],\n    beforeEach: function beforeEach() {\n      this.register('service:metrics', {}, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/routes/new/modal/terms-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine'], function (_emberQunit, _testModuleForEngine) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('route:new/modal/terms', 'Unit | Route | new/modal/terms', {\n    needs: ['service:transfers'],\n    beforeEach: function beforeEach() {\n      this.register('service:metrics', {}, { instantiate: false });\n    }\n  });\n\n  (0, _emberQunit.test)('it exists', function (assert) {\n    var route = this.subject();\n    assert.ok(route);\n  });\n});","define('dummy/tests/unit/serializers/application-test', ['ember-data/model', 'ember-runloop', 'ember-data/relationships', 'ember-qunit'], function (_model, _emberRunloop, _relationships, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('ticket', 'Unit | Serializer | application', {\n    needs: ['serializer:application']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it uses ${key}Id for belongsTo relationships', function (assert) {\n    this.container.registry.register('model:test-b', _model.default.extend());\n    this.container.registry.register('model:test-a', _model.default.extend({\n      child: (0, _relationships.belongsTo)('test-b')\n    }));\n\n    var store = this.store();\n    (0, _emberRunloop.default)(store, 'pushPayload', {\n      testA: {\n        id: '1',\n        childId: '2'\n      },\n      testB: {\n        id: '2'\n      }\n    });\n\n    assert.equal(store.peekRecord('test-a', '1').get('child.id'), '2');\n  });\n\n  (0, _emberQunit.test)('it uses ${key}Ids for hasMany relationships', function (assert) {\n    this.container.registry.register('model:test-b', _model.default.extend());\n    this.container.registry.register('model:test-a', _model.default.extend({\n      children: (0, _relationships.hasMany)('test-b')\n    }));\n\n    var store = this.store();\n    (0, _emberRunloop.default)(store, 'pushPayload', {\n      testA: {\n        id: '1',\n        childIds: ['2', '3']\n      },\n      testBs: [{ id: '2' }, { id: '3' }]\n    });\n\n    assert.deepEqual(store.peekRecord('test-a', '1').get('children').mapBy('id'), ['2', '3']);\n  });\n});","define('dummy/tests/unit/serializers/event-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('event', 'Unit | Serializer | event', {\n    needs: ['serializer:event', 'serializer:application']\n  });\n\n  (0, _emberQunit.test)('it joins the venue information into an event with single response', function (assert) {\n    var store = this.store();\n    var serializer = store.serializerFor('event');\n\n    var result = serializer.normalizeSingleResponse(store, store.modelFor('event'), {\n      event: { id: '1', venueId: '2' },\n      venues: [{ id: '2' }]\n    }, '1', 'findRecord');\n\n    assert.deepEqual(result, {\n      data: {\n        type: 'event',\n        id: '1',\n        attributes: {\n          venue: { id: '2' }\n        },\n        relationships: {}\n      },\n      included: []\n    });\n  });\n\n  (0, _emberQunit.test)('it assigns `null` to venue if no corresponding venue was found', function (assert) {\n    var store = this.store();\n    var serializer = store.serializerFor('event');\n\n    var result = serializer.normalizeSingleResponse(store, store.modelFor('event'), {\n      event: { id: '1', venueId: '2' },\n      venues: [{ id: '3' }]\n    }, '1', 'findRecord');\n\n    assert.deepEqual(result, {\n      data: {\n        type: 'event',\n        id: '1',\n        attributes: {\n          venue: null\n        },\n        relationships: {}\n      },\n      included: []\n    });\n  });\n\n  (0, _emberQunit.test)('it assigns `null` to venue if it has not venue', function (assert) {\n    var store = this.store();\n    var serializer = store.serializerFor('event');\n\n    var result = serializer.normalizeSingleResponse(store, store.modelFor('event'), {\n      event: { id: '1' },\n      venues: [{ id: '3' }]\n    }, '1', 'findRecord');\n\n    assert.deepEqual(result, {\n      data: {\n        type: 'event',\n        id: '1',\n        attributes: {\n          venue: null\n        },\n        relationships: {}\n      },\n      included: []\n    });\n  });\n\n  (0, _emberQunit.test)('it joins the venue information into an event with array response', function (assert) {\n    var store = this.store();\n    var serializer = store.serializerFor('event');\n\n    var result = serializer.normalizeArrayResponse(store, store.modelFor('event'), {\n      events: [{ id: '1', venueId: '2' }, { id: '2', venueId: '2' }, { id: '3', venueId: '3' }],\n      venues: [{ id: '2' }, { id: '3' }]\n    }, null, 'findAll');\n\n    assert.deepEqual(result, {\n      data: [{\n        type: 'event',\n        id: '1',\n        attributes: { venue: { id: '2' } },\n        relationships: {}\n      }, {\n        type: 'event',\n        id: '2',\n        attributes: { venue: { id: '2' } },\n        relationships: {}\n      }, {\n        type: 'event',\n        id: '3',\n        attributes: { venue: { id: '3' } },\n        relationships: {}\n      }],\n      included: []\n    });\n  });\n});","define('dummy/tests/unit/serializers/marketing-membership-test', ['ember-metal/get', 'ember-runloop', 'ember-qunit'], function (_get, _emberRunloop, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('marketing-membership', 'Unit | Serializer | marketing membership', {\n    needs: ['serializer:marketing-membership']\n  });\n\n  (0, _emberQunit.test)('it serializes records', function (assert) {\n    var serializer = this.store().serializerFor('marketing-membership');\n    var record = this.subject({\n      id: '1',\n      userId: '1234',\n      orgId: '2345',\n      emailSubscription: true\n    });\n\n    var resultHash = {};\n    serializer.serializeIntoHash(resultHash, { modelName: 'marketing-membership' }, record._internalModel.createSnapshot(), {});\n\n    assert.deepEqual(resultHash, {\n      membership: {\n        id: '1',\n        userId: '1234',\n        orgId: '2345',\n        emailSubscription: true,\n        userUuid: '1234'\n      }\n    });\n  });\n\n  (0, _emberQunit.test)('it deserializes records', function (assert) {\n    var store = this.store();\n    var serializer = store.serializerFor('marketing-membership');\n\n    var record = (0, _emberRunloop.default)(function () {\n      store.pushPayload(serializer.normalizeQueryRecordResponse(store, 'marketing-membership', {\n        memberships: [{\n          id: '1',\n          userId: '1234',\n          orgId: '2345',\n          emailSubscription: true\n        }]\n      }, null, 'queryRecord'));\n\n      return store.peekRecord('marketing-membership', '1');\n    });\n\n    assert.equal((0, _get.default)(record, 'id'), '1');\n  });\n});","define('dummy/tests/unit/serializers/ticket-test', ['ember-runloop', 'ember-qunit'], function (_emberRunloop, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('ticket', 'Unit | Serializer | ticket', {\n    needs: ['serializer:ticket', 'model:ticket', 'model:ticket-transfer', 'model:event']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it gets the ticket-transfer relationship from transferState', function (assert) {\n    var store = this.store();\n    (0, _emberRunloop.default)(store, 'pushPayload', 'ticket', {\n      ticket: {\n        id: '1',\n        transferState: {\n          transferId: '1'\n        }\n      }\n    });\n\n    assert.ok(store.peekRecord('ticket', '1').belongsTo('transfer').id(), '1');\n  });\n});","define('dummy/tests/unit/serializers/ticket-transfer-test', ['ember-runloop', 'ember-qunit'], function (_emberRunloop, _emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('ticket-transfer', 'Unit | Serializer | ticket transfer', {\n    needs: ['serializer:ticket-transfer', 'serializer:application', 'model:ticket-transfer', 'model:ticket', 'model:event']\n  });\n\n  // Replace this with your real tests.\n  (0, _emberQunit.test)('it serializes related ticket IDs', function (assert) {\n    var store = this.store();\n    (0, _emberRunloop.default)(store, 'pushPayload', 'ticket', {\n      ticket: {\n        id: '1'\n      }\n    });\n\n    var ticket = (0, _emberRunloop.default)(store, 'peekRecord', 'ticket', '1');\n    var record = this.subject({\n      tickets: [ticket]\n    });\n\n    var _record$serialize = record.serialize(),\n        ticketIds = _record$serialize.ticketIds;\n\n    assert.deepEqual(ticketIds, ['1']);\n  });\n});","define('dummy/tests/unit/serializers/user-test', ['ember-qunit'], function (_emberQunit) {\n  'use strict';\n\n  (0, _emberQunit.moduleForModel)('user', 'Unit | Serializer | user', {\n    needs: ['serializer:application', 'serializer:user', 'service:metrics']\n  });\n\n  (0, _emberQunit.test)('it serializes with all required attributes', function (assert) {\n    var record = this.subject({\n      id: '1',\n      firstName: 'Spencer',\n      lastName: 'Price',\n      email: 'spencer.price@ticketfly.com'\n    });\n\n    assert.deepEqual(record.serialize(), {\n      id: '1',\n      firstName: 'Spencer',\n      lastName: 'Price',\n      email: 'spencer.price@ticketfly.com'\n    });\n  });\n});","define('dummy/tests/unit/services/transfers-test', ['ember-qunit', 'dummy/tests/helpers/test-module-for-engine'], function (_emberQunit, _testModuleForEngine) {\n  'use strict';\n\n  (0, _testModuleForEngine.moduleFor)('service:transfers', 'Unit | Service | transfers', {});\n\n  (0, _emberQunit.test)('it can get and set transfer state', function (assert) {\n    var service = this.subject();\n\n    service.setTransferState({ tickets: [], email: 'test', message: 'Hello!' });\n\n    assert.deepEqual(service.getTransferState(), {\n      tickets: [],\n      email: 'test',\n      message: 'Hello!'\n    });\n  });\n});","require('dummy/tests/test-helper');\nEmberENV.TESTS_FILE_LOADED = true;\n"],"names":[],"mappingshtbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACXA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;;ACNA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC9BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACTA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxrzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClvKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC5EA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AClJA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACxEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACvDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC7BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChzLA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACtvrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC1BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACjjnMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC3BA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AC/CA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACnrnMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACdhMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzCA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACbrGA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AChDA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACpBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACzBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACrBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;ACfA;AACA;","file":"tests.js"}